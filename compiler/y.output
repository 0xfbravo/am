Grammar

    0 $accept: BEFORE_THE_BEGINNING $end

    1 BEFORE_THE_BEGINNING: CMDS

    2 BLOCK: START_SCOPE BLOCK_INIT CMDS BLOCK_END END_SCOPE

    3 START_SCOPE: %empty

    4 END_SCOPE: %empty

    5 CMDS: CMD CMDS
    6     | %empty

    7 WHILE: R_WHILE EXP BLOCK

    8 DO_WHILE: R_DO BLOCK R_WHILE EXP

    9 IF: R_IF EXP BLOCK ELSE

   10 ELSE: R_ELSE ELSEIF
   11     | %empty

   12 ELSEIF: IF
   13       | BLOCK

   14 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' BLOCK

   15 SWITCH: R_SWITCH EXP BLOCK_INIT END_LINE CASES BLOCK_END

   16 CASES: CASE DEFAULT
   17      | CASE CASES

   18 CASE: R_CASE EXP COLON CMDS

   19 DEFAULT: R_DEFAULT COLON CMDS

   20 BREAK: R_BREAK

   21 CONTINUE: R_CONTINUE

   22 ASSIGNMENT_STATE: varConst ASSIGNMENT EXP

   23 CMD: IF
   24    | WHILE
   25    | DO_WHILE
   26    | END_LINE
   27    | FOR
   28    | SWITCH
   29    | BREAK
   30    | CONTINUE
   31    | IS
   32    | IN
   33    | OUT
   34    | IS SEMI_COLON
   35    | IN SEMI_COLON
   36    | OUT SEMI_COLON
   37    | ASSIGNMENT_STATE
   38    | ASSIGNMENT_STATE SEMI_COLON
   39    | UNITARY_STATE
   40    | UNITARY_STATE SEMI_COLON

   41 UNITARY_STATE: varConst R_UP
   42              | varConst R_UM

   43 IS: varConst R_IS TYPE

   44 TYPE: INTEGER
   45     | FLOAT
   46     | BOOLEAN
   47     | CHARACTER
   48     | STRING

   49 IN: R_IN COLON varConst

   50 OUT: R_OUT COLON EXP COMMA_OUT

   51 COMMA_OUT: COMMA EXP COMMA_OUT
   52          | %empty

   53 EXP: UNITARY_STATE
   54    | EXP R_DOT EXP
   55    | EXP COLON COLON EXPLICIT_TYPE
   56    | EXP BOOLEAN_LOGIC EXP
   57    | NOT EXP
   58    | EXP QUESTION EXP COLON EXP
   59    | EXP EQUALITY_TEST EXP
   60    | EXP ORDER_RELATION EXP
   61    | EXP ARITHMETIC_1 EXP
   62    | EXP ARITHMETIC_2 EXP
   63    | '(' EXP ')'
   64    | VAR
   65    | CONST
   66    | INTEGER
   67    | FLOAT
   68    | BOOLEAN
   69    | CHARACTER
   70    | STRING

   71 varConst: VAR
   72         | CONST


Terminals, with rules where they appear

$end (0) 0
'(' (40) 14 63
')' (41) 14 63
error (256)
BLOCK_INIT (258) 2 15
BLOCK_END (259) 2 15
SEMI_COLON (260) 14 34 35 36 38 40
R_UP (261) 41
R_UM (262) 42
R_IF (263) 9
R_ELSE (264) 10
R_WHILE (265) 7 8
R_DO (266) 8
R_FOR (267) 14
R_SWITCH (268) 15
R_CASE (269) 18
R_DEFAULT (270) 19
R_BREAK (271) 20
R_CONTINUE (272) 21
R_IN (273) 49
R_OUT (274) 50
R_IS (275) 43
R_DOT (276) 54
INTEGER (277) 44 66
FLOAT (278) 45 67
BOOLEAN (279) 46 68
CHARACTER (280) 47 69
STRING (281) 48 70
ARITHMETIC_1 (282) 61
ARITHMETIC_2 (283) 62
BOOLEAN_LOGIC (284) 56
EQUALITY_TEST (285) 59
ORDER_RELATION (286) 60
ASSIGNMENT (287) 22
NOT (288) 57
COLON (289) 18 19 49 50 55 58
QUESTION (290) 58
COMMA (291) 51
VAR (292) 64 71
CONST (293) 65 72
EXPLICIT_TYPE (294) 55
END_LINE (295) 15 26


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
BEFORE_THE_BEGINNING (44)
    on left: 1, on right: 0
BLOCK (45)
    on left: 2, on right: 7 8 9 13 14
START_SCOPE (46)
    on left: 3, on right: 2
END_SCOPE (47)
    on left: 4, on right: 2
CMDS (48)
    on left: 5 6, on right: 1 2 5 18 19
WHILE (49)
    on left: 7, on right: 24
DO_WHILE (50)
    on left: 8, on right: 25
IF (51)
    on left: 9, on right: 12 23
ELSE (52)
    on left: 10 11, on right: 9
ELSEIF (53)
    on left: 12 13, on right: 10
FOR (54)
    on left: 14, on right: 27
SWITCH (55)
    on left: 15, on right: 28
CASES (56)
    on left: 16 17, on right: 15 17
CASE (57)
    on left: 18, on right: 16 17
DEFAULT (58)
    on left: 19, on right: 16
BREAK (59)
    on left: 20, on right: 29
CONTINUE (60)
    on left: 21, on right: 30
ASSIGNMENT_STATE (61)
    on left: 22, on right: 14 37 38
CMD (62)
    on left: 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40,
    on right: 5
UNITARY_STATE (63)
    on left: 41 42, on right: 14 39 40 53
IS (64)
    on left: 43, on right: 31 34
TYPE (65)
    on left: 44 45 46 47 48, on right: 43
IN (66)
    on left: 49, on right: 32 35
OUT (67)
    on left: 50, on right: 33 36
COMMA_OUT (68)
    on left: 51 52, on right: 50 51
EXP (69)
    on left: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70,
    on right: 7 8 9 14 15 18 22 50 51 54 55 56 57 58 59 60 61 62 63
varConst (70)
    on left: 71 72, on right: 22 41 42 43 49


State 0

    0 $accept: . BEFORE_THE_BEGINNING $end

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    $default  reduce using rule 6 (CMDS)

    BEFORE_THE_BEGINNING  go to state 13
    CMDS                  go to state 14
    WHILE                 go to state 15
    DO_WHILE              go to state 16
    IF                    go to state 17
    FOR                   go to state 18
    SWITCH                go to state 19
    BREAK                 go to state 20
    CONTINUE              go to state 21
    ASSIGNMENT_STATE      go to state 22
    CMD                   go to state 23
    UNITARY_STATE         go to state 24
    IS                    go to state 25
    IN                    go to state 26
    OUT                   go to state 27
    varConst              go to state 28


State 1

    9 IF: R_IF . EXP BLOCK ELSE

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 39
    varConst       go to state 40


State 2

    7 WHILE: R_WHILE . EXP BLOCK

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 41
    varConst       go to state 40


State 3

    8 DO_WHILE: R_DO . BLOCK R_WHILE EXP

    $default  reduce using rule 3 (START_SCOPE)

    BLOCK        go to state 42
    START_SCOPE  go to state 43


State 4

   14 FOR: R_FOR . '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' BLOCK

    '('  shift, and go to state 44


State 5

   15 SWITCH: R_SWITCH . EXP BLOCK_INIT END_LINE CASES BLOCK_END

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 45
    varConst       go to state 40


State 6

   20 BREAK: R_BREAK .

    $default  reduce using rule 20 (BREAK)


State 7

   21 CONTINUE: R_CONTINUE .

    $default  reduce using rule 21 (CONTINUE)


State 8

   49 IN: R_IN . COLON varConst

    COLON  shift, and go to state 46


State 9

   50 OUT: R_OUT . COLON EXP COMMA_OUT

    COLON  shift, and go to state 47


State 10

   71 varConst: VAR .

    $default  reduce using rule 71 (varConst)


State 11

   72 varConst: CONST .

    $default  reduce using rule 72 (varConst)


State 12

   26 CMD: END_LINE .

    $default  reduce using rule 26 (CMD)


State 13

    0 $accept: BEFORE_THE_BEGINNING . $end

    $end  shift, and go to state 48


State 14

    1 BEFORE_THE_BEGINNING: CMDS .

    $default  reduce using rule 1 (BEFORE_THE_BEGINNING)


State 15

   24 CMD: WHILE .

    $default  reduce using rule 24 (CMD)


State 16

   25 CMD: DO_WHILE .

    $default  reduce using rule 25 (CMD)


State 17

   23 CMD: IF .

    $default  reduce using rule 23 (CMD)


State 18

   27 CMD: FOR .

    $default  reduce using rule 27 (CMD)


State 19

   28 CMD: SWITCH .

    $default  reduce using rule 28 (CMD)


State 20

   29 CMD: BREAK .

    $default  reduce using rule 29 (CMD)


State 21

   30 CMD: CONTINUE .

    $default  reduce using rule 30 (CMD)


State 22

   37 CMD: ASSIGNMENT_STATE .
   38    | ASSIGNMENT_STATE . SEMI_COLON

    SEMI_COLON  shift, and go to state 49

    $default  reduce using rule 37 (CMD)


State 23

    5 CMDS: CMD . CMDS

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    $default  reduce using rule 6 (CMDS)

    CMDS              go to state 50
    WHILE             go to state 15
    DO_WHILE          go to state 16
    IF                go to state 17
    FOR               go to state 18
    SWITCH            go to state 19
    BREAK             go to state 20
    CONTINUE          go to state 21
    ASSIGNMENT_STATE  go to state 22
    CMD               go to state 23
    UNITARY_STATE     go to state 24
    IS                go to state 25
    IN                go to state 26
    OUT               go to state 27
    varConst          go to state 28


State 24

   39 CMD: UNITARY_STATE .
   40    | UNITARY_STATE . SEMI_COLON

    SEMI_COLON  shift, and go to state 51

    $default  reduce using rule 39 (CMD)


State 25

   31 CMD: IS .
   34    | IS . SEMI_COLON

    SEMI_COLON  shift, and go to state 52

    $default  reduce using rule 31 (CMD)


State 26

   32 CMD: IN .
   35    | IN . SEMI_COLON

    SEMI_COLON  shift, and go to state 53

    $default  reduce using rule 32 (CMD)


State 27

   33 CMD: OUT .
   36    | OUT . SEMI_COLON

    SEMI_COLON  shift, and go to state 54

    $default  reduce using rule 33 (CMD)


State 28

   22 ASSIGNMENT_STATE: varConst . ASSIGNMENT EXP
   41 UNITARY_STATE: varConst . R_UP
   42              | varConst . R_UM
   43 IS: varConst . R_IS TYPE

    R_UP        shift, and go to state 55
    R_UM        shift, and go to state 56
    R_IS        shift, and go to state 57
    ASSIGNMENT  shift, and go to state 58


State 29

   66 EXP: INTEGER .

    $default  reduce using rule 66 (EXP)


State 30

   67 EXP: FLOAT .

    $default  reduce using rule 67 (EXP)


State 31

   68 EXP: BOOLEAN .

    $default  reduce using rule 68 (EXP)


State 32

   69 EXP: CHARACTER .

    $default  reduce using rule 69 (EXP)


State 33

   70 EXP: STRING .

    $default  reduce using rule 70 (EXP)


State 34

   57 EXP: NOT . EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 59
    varConst       go to state 40


State 35

   64 EXP: VAR .
   71 varConst: VAR .

    R_UP      reduce using rule 71 (varConst)
    R_UM      reduce using rule 71 (varConst)
    $default  reduce using rule 64 (EXP)


State 36

   65 EXP: CONST .
   72 varConst: CONST .

    R_UP      reduce using rule 72 (varConst)
    R_UM      reduce using rule 72 (varConst)
    $default  reduce using rule 65 (EXP)


State 37

   63 EXP: '(' . EXP ')'

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 60
    varConst       go to state 40


State 38

   53 EXP: UNITARY_STATE .

    $default  reduce using rule 53 (EXP)


State 39

    9 IF: R_IF EXP . BLOCK ELSE
   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 67
    QUESTION        shift, and go to state 68

    $default  reduce using rule 3 (START_SCOPE)

    BLOCK        go to state 69
    START_SCOPE  go to state 43


State 40

   41 UNITARY_STATE: varConst . R_UP
   42              | varConst . R_UM

    R_UP  shift, and go to state 55
    R_UM  shift, and go to state 56


State 41

    7 WHILE: R_WHILE EXP . BLOCK
   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 67
    QUESTION        shift, and go to state 68

    $default  reduce using rule 3 (START_SCOPE)

    BLOCK        go to state 70
    START_SCOPE  go to state 43


State 42

    8 DO_WHILE: R_DO BLOCK . R_WHILE EXP

    R_WHILE  shift, and go to state 71


State 43

    2 BLOCK: START_SCOPE . BLOCK_INIT CMDS BLOCK_END END_SCOPE

    BLOCK_INIT  shift, and go to state 72


State 44

   14 FOR: R_FOR '(' . ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' BLOCK

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    ASSIGNMENT_STATE  go to state 73
    varConst          go to state 74


State 45

   15 SWITCH: R_SWITCH EXP . BLOCK_INIT END_LINE CASES BLOCK_END
   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    BLOCK_INIT      shift, and go to state 75
    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 67
    QUESTION        shift, and go to state 68


State 46

   49 IN: R_IN COLON . varConst

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    varConst  go to state 76


State 47

   50 OUT: R_OUT COLON . EXP COMMA_OUT

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 77
    varConst       go to state 40


State 48

    0 $accept: BEFORE_THE_BEGINNING $end .

    $default  accept


State 49

   38 CMD: ASSIGNMENT_STATE SEMI_COLON .

    $default  reduce using rule 38 (CMD)


State 50

    5 CMDS: CMD CMDS .

    $default  reduce using rule 5 (CMDS)


State 51

   40 CMD: UNITARY_STATE SEMI_COLON .

    $default  reduce using rule 40 (CMD)


State 52

   34 CMD: IS SEMI_COLON .

    $default  reduce using rule 34 (CMD)


State 53

   35 CMD: IN SEMI_COLON .

    $default  reduce using rule 35 (CMD)


State 54

   36 CMD: OUT SEMI_COLON .

    $default  reduce using rule 36 (CMD)


State 55

   41 UNITARY_STATE: varConst R_UP .

    $default  reduce using rule 41 (UNITARY_STATE)


State 56

   42 UNITARY_STATE: varConst R_UM .

    $default  reduce using rule 42 (UNITARY_STATE)


State 57

   43 IS: varConst R_IS . TYPE

    INTEGER    shift, and go to state 78
    FLOAT      shift, and go to state 79
    BOOLEAN    shift, and go to state 80
    CHARACTER  shift, and go to state 81
    STRING     shift, and go to state 82

    TYPE  go to state 83


State 58

   22 ASSIGNMENT_STATE: varConst ASSIGNMENT . EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 84
    varConst       go to state 40


State 59

   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   57    | NOT EXP .
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 61
    ARITHMETIC_1  shift, and go to state 62
    ARITHMETIC_2  shift, and go to state 63

    $default  reduce using rule 57 (EXP)


State 60

   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP
   63    | '(' EXP . ')'

    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 67
    QUESTION        shift, and go to state 68
    ')'             shift, and go to state 85


State 61

   54 EXP: EXP R_DOT . EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 86
    varConst       go to state 40


State 62

   61 EXP: EXP ARITHMETIC_1 . EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 87
    varConst       go to state 40


State 63

   62 EXP: EXP ARITHMETIC_2 . EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 88
    varConst       go to state 40


State 64

   56 EXP: EXP BOOLEAN_LOGIC . EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 89
    varConst       go to state 40


State 65

   59 EXP: EXP EQUALITY_TEST . EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 90
    varConst       go to state 40


State 66

   60 EXP: EXP ORDER_RELATION . EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 91
    varConst       go to state 40


State 67

   55 EXP: EXP COLON . COLON EXPLICIT_TYPE

    COLON  shift, and go to state 92


State 68

   58 EXP: EXP QUESTION . EXP COLON EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 93
    varConst       go to state 40


State 69

    9 IF: R_IF EXP BLOCK . ELSE

    R_ELSE  shift, and go to state 94

    $default  reduce using rule 11 (ELSE)

    ELSE  go to state 95


State 70

    7 WHILE: R_WHILE EXP BLOCK .

    $default  reduce using rule 7 (WHILE)


State 71

    8 DO_WHILE: R_DO BLOCK R_WHILE . EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 96
    varConst       go to state 40


State 72

    2 BLOCK: START_SCOPE BLOCK_INIT . CMDS BLOCK_END END_SCOPE

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    $default  reduce using rule 6 (CMDS)

    CMDS              go to state 97
    WHILE             go to state 15
    DO_WHILE          go to state 16
    IF                go to state 17
    FOR               go to state 18
    SWITCH            go to state 19
    BREAK             go to state 20
    CONTINUE          go to state 21
    ASSIGNMENT_STATE  go to state 22
    CMD               go to state 23
    UNITARY_STATE     go to state 24
    IS                go to state 25
    IN                go to state 26
    OUT               go to state 27
    varConst          go to state 28


State 73

   14 FOR: R_FOR '(' ASSIGNMENT_STATE . SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' BLOCK

    SEMI_COLON  shift, and go to state 98


State 74

   22 ASSIGNMENT_STATE: varConst . ASSIGNMENT EXP

    ASSIGNMENT  shift, and go to state 58


State 75

   15 SWITCH: R_SWITCH EXP BLOCK_INIT . END_LINE CASES BLOCK_END

    END_LINE  shift, and go to state 99


State 76

   49 IN: R_IN COLON varConst .

    $default  reduce using rule 49 (IN)


State 77

   50 OUT: R_OUT COLON EXP . COMMA_OUT
   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 67
    QUESTION        shift, and go to state 68
    COMMA           shift, and go to state 100

    $default  reduce using rule 52 (COMMA_OUT)

    COMMA_OUT  go to state 101


State 78

   44 TYPE: INTEGER .

    $default  reduce using rule 44 (TYPE)


State 79

   45 TYPE: FLOAT .

    $default  reduce using rule 45 (TYPE)


State 80

   46 TYPE: BOOLEAN .

    $default  reduce using rule 46 (TYPE)


State 81

   47 TYPE: CHARACTER .

    $default  reduce using rule 47 (TYPE)


State 82

   48 TYPE: STRING .

    $default  reduce using rule 48 (TYPE)


State 83

   43 IS: varConst R_IS TYPE .

    $default  reduce using rule 43 (IS)


State 84

   22 ASSIGNMENT_STATE: varConst ASSIGNMENT EXP .
   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 67
    QUESTION        shift, and go to state 68

    $default  reduce using rule 22 (ASSIGNMENT_STATE)


State 85

   63 EXP: '(' EXP ')' .

    $default  reduce using rule 63 (EXP)


State 86

   54 EXP: EXP . R_DOT EXP
   54    | EXP R_DOT EXP .
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    ARITHMETIC_1  shift, and go to state 62
    ARITHMETIC_2  shift, and go to state 63

    $default  reduce using rule 54 (EXP)


State 87

   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   61    | EXP ARITHMETIC_1 EXP .
   62    | EXP . ARITHMETIC_2 EXP

    ARITHMETIC_2  shift, and go to state 63

    $default  reduce using rule 61 (EXP)


State 88

   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP
   62    | EXP ARITHMETIC_2 EXP .

    $default  reduce using rule 62 (EXP)


State 89

   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   56    | EXP BOOLEAN_LOGIC EXP .
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 67
    QUESTION        shift, and go to state 68

    $default  reduce using rule 56 (EXP)


State 90

   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   59    | EXP EQUALITY_TEST EXP .
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 61
    ARITHMETIC_1  shift, and go to state 62
    ARITHMETIC_2  shift, and go to state 63
    COLON         shift, and go to state 67
    QUESTION      shift, and go to state 68

    $default  reduce using rule 59 (EXP)


State 91

   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   60    | EXP ORDER_RELATION EXP .
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 61
    ARITHMETIC_1  shift, and go to state 62
    ARITHMETIC_2  shift, and go to state 63
    COLON         shift, and go to state 67
    QUESTION      shift, and go to state 68

    $default  reduce using rule 60 (EXP)


State 92

   55 EXP: EXP COLON COLON . EXPLICIT_TYPE

    EXPLICIT_TYPE  shift, and go to state 102


State 93

   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   58    | EXP QUESTION EXP . COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 103
    QUESTION        shift, and go to state 68


State 94

   10 ELSE: R_ELSE . ELSEIF

    R_IF  shift, and go to state 1

    $default  reduce using rule 3 (START_SCOPE)

    BLOCK        go to state 104
    START_SCOPE  go to state 43
    IF           go to state 105
    ELSEIF       go to state 106


State 95

    9 IF: R_IF EXP BLOCK ELSE .

    $default  reduce using rule 9 (IF)


State 96

    8 DO_WHILE: R_DO BLOCK R_WHILE EXP .
   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 67
    QUESTION        shift, and go to state 68

    $default  reduce using rule 8 (DO_WHILE)


State 97

    2 BLOCK: START_SCOPE BLOCK_INIT CMDS . BLOCK_END END_SCOPE

    BLOCK_END  shift, and go to state 107


State 98

   14 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON . EXP SEMI_COLON UNITARY_STATE ')' BLOCK

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 108
    varConst       go to state 40


State 99

   15 SWITCH: R_SWITCH EXP BLOCK_INIT END_LINE . CASES BLOCK_END

    R_CASE  shift, and go to state 109

    CASES  go to state 110
    CASE   go to state 111


State 100

   51 COMMA_OUT: COMMA . EXP COMMA_OUT

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 112
    varConst       go to state 40


State 101

   50 OUT: R_OUT COLON EXP COMMA_OUT .

    $default  reduce using rule 50 (OUT)


State 102

   55 EXP: EXP COLON COLON EXPLICIT_TYPE .

    $default  reduce using rule 55 (EXP)


State 103

   55 EXP: EXP COLON . COLON EXPLICIT_TYPE
   58    | EXP QUESTION EXP COLON . EXP

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    COLON      shift, and go to state 92
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 113
    varConst       go to state 40


State 104

   13 ELSEIF: BLOCK .

    $default  reduce using rule 13 (ELSEIF)


State 105

   12 ELSEIF: IF .

    $default  reduce using rule 12 (ELSEIF)


State 106

   10 ELSE: R_ELSE ELSEIF .

    $default  reduce using rule 10 (ELSE)


State 107

    2 BLOCK: START_SCOPE BLOCK_INIT CMDS BLOCK_END . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 114


State 108

   14 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP . SEMI_COLON UNITARY_STATE ')' BLOCK
   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    SEMI_COLON      shift, and go to state 115
    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 67
    QUESTION        shift, and go to state 68


State 109

   18 CASE: R_CASE . EXP COLON CMDS

    INTEGER    shift, and go to state 29
    FLOAT      shift, and go to state 30
    BOOLEAN    shift, and go to state 31
    CHARACTER  shift, and go to state 32
    STRING     shift, and go to state 33
    NOT        shift, and go to state 34
    VAR        shift, and go to state 35
    CONST      shift, and go to state 36
    '('        shift, and go to state 37

    UNITARY_STATE  go to state 38
    EXP            go to state 116
    varConst       go to state 40


State 110

   15 SWITCH: R_SWITCH EXP BLOCK_INIT END_LINE CASES . BLOCK_END

    BLOCK_END  shift, and go to state 117


State 111

   16 CASES: CASE . DEFAULT
   17      | CASE . CASES

    R_CASE     shift, and go to state 109
    R_DEFAULT  shift, and go to state 118

    CASES    go to state 119
    CASE     go to state 111
    DEFAULT  go to state 120


State 112

   51 COMMA_OUT: COMMA EXP . COMMA_OUT
   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 67
    QUESTION        shift, and go to state 68
    COMMA           shift, and go to state 100

    $default  reduce using rule 52 (COMMA_OUT)

    COMMA_OUT  go to state 121


State 113

   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   58    | EXP QUESTION EXP COLON EXP .
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 61
    ARITHMETIC_1  shift, and go to state 62
    ARITHMETIC_2  shift, and go to state 63

    $default  reduce using rule 58 (EXP)


State 114

    2 BLOCK: START_SCOPE BLOCK_INIT CMDS BLOCK_END END_SCOPE .

    $default  reduce using rule 2 (BLOCK)


State 115

   14 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON . UNITARY_STATE ')' BLOCK

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    UNITARY_STATE  go to state 122
    varConst       go to state 40


State 116

   18 CASE: R_CASE EXP . COLON CMDS
   54 EXP: EXP . R_DOT EXP
   55    | EXP . COLON COLON EXPLICIT_TYPE
   56    | EXP . BOOLEAN_LOGIC EXP
   58    | EXP . QUESTION EXP COLON EXP
   59    | EXP . EQUALITY_TEST EXP
   60    | EXP . ORDER_RELATION EXP
   61    | EXP . ARITHMETIC_1 EXP
   62    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 61
    ARITHMETIC_1    shift, and go to state 62
    ARITHMETIC_2    shift, and go to state 63
    BOOLEAN_LOGIC   shift, and go to state 64
    EQUALITY_TEST   shift, and go to state 65
    ORDER_RELATION  shift, and go to state 66
    COLON           shift, and go to state 123
    QUESTION        shift, and go to state 68


State 117

   15 SWITCH: R_SWITCH EXP BLOCK_INIT END_LINE CASES BLOCK_END .

    $default  reduce using rule 15 (SWITCH)


State 118

   19 DEFAULT: R_DEFAULT . COLON CMDS

    COLON  shift, and go to state 124


State 119

   17 CASES: CASE CASES .

    $default  reduce using rule 17 (CASES)


State 120

   16 CASES: CASE DEFAULT .

    $default  reduce using rule 16 (CASES)


State 121

   51 COMMA_OUT: COMMA EXP COMMA_OUT .

    $default  reduce using rule 51 (COMMA_OUT)


State 122

   14 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE . ')' BLOCK

    ')'  shift, and go to state 125


State 123

   18 CASE: R_CASE EXP COLON . CMDS
   55 EXP: EXP COLON . COLON EXPLICIT_TYPE

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    COLON       shift, and go to state 92
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    $default  reduce using rule 6 (CMDS)

    CMDS              go to state 126
    WHILE             go to state 15
    DO_WHILE          go to state 16
    IF                go to state 17
    FOR               go to state 18
    SWITCH            go to state 19
    BREAK             go to state 20
    CONTINUE          go to state 21
    ASSIGNMENT_STATE  go to state 22
    CMD               go to state 23
    UNITARY_STATE     go to state 24
    IS                go to state 25
    IN                go to state 26
    OUT               go to state 27
    varConst          go to state 28


State 124

   19 DEFAULT: R_DEFAULT COLON . CMDS

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    $default  reduce using rule 6 (CMDS)

    CMDS              go to state 127
    WHILE             go to state 15
    DO_WHILE          go to state 16
    IF                go to state 17
    FOR               go to state 18
    SWITCH            go to state 19
    BREAK             go to state 20
    CONTINUE          go to state 21
    ASSIGNMENT_STATE  go to state 22
    CMD               go to state 23
    UNITARY_STATE     go to state 24
    IS                go to state 25
    IN                go to state 26
    OUT               go to state 27
    varConst          go to state 28


State 125

   14 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' . BLOCK

    $default  reduce using rule 3 (START_SCOPE)

    BLOCK        go to state 128
    START_SCOPE  go to state 43


State 126

   18 CASE: R_CASE EXP COLON CMDS .

    $default  reduce using rule 18 (CASE)


State 127

   19 DEFAULT: R_DEFAULT COLON CMDS .

    $default  reduce using rule 19 (DEFAULT)


State 128

   14 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' BLOCK .

    $default  reduce using rule 14 (FOR)
