Terminals unused in grammar

   RETURN
   MTX_INT
   MTX_FLOAT
   MTX_BOOLEAN
   MTX_CHAR
   MTX_STRING
   VOID


State 144 conflicts: 1 shift/reduce


Grammar

    0 $accept: BEFORE_THE_BEGINNING $end

    1 BEFORE_THE_BEGINNING: CMDS

    2 BLOCK: BLOCK_INIT CMDS BLOCK_END

    3 START_SCOPE: %empty

    4 END_SCOPE: %empty

    5 CMDS: CMD CMDS
    6     | %empty

    7 WHILE: R_WHILE EXP START_SCOPE BLOCK END_SCOPE

    8 DO_WHILE: R_DO START_SCOPE BLOCK END_SCOPE R_WHILE EXP

    9 IF: R_IF EXP START_SCOPE BLOCK END_SCOPE ELSES

   10 ELSES: ELSES ELSE
   11      | END_LINE

   12 ELSE: R_ELSE ELSEIF

   13 ELSEIF: IF
   14       | START_SCOPE BLOCK END_SCOPE

   15 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' BLOCK

   16 SWITCH: R_SWITCH EXP BLOCK_INIT END_LINE CASES BLOCK_END

   17 CASES: CASE DEFAULT
   18      | CASE CASES

   19 CASE: R_CASE EXP COLON CMDS

   20 DEFAULT: R_DEFAULT COLON CMDS

   21 BREAK: R_BREAK

   22 CONTINUE: R_CONTINUE

   23 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP
   24                 | varConst ASSIGNMENT EXP

   25 FUNCTION_STATE: varConst START_SCOPE '(' PARAMS ')' BLOCK END_SCOPE

   26 PARAMS: PARAM COMMA_PARAMS
   27       | %empty

   28 COMMA_PARAMS: COMMA PARAM COMMA_PARAMS
   29             | %empty

   30 PARAM: IS

   31 CMD: FUNCTION_STATE
   32    | IF
   33    | WHILE
   34    | DO_WHILE
   35    | END_LINE
   36    | FOR
   37    | SWITCH
   38    | BREAK
   39    | CONTINUE
   40    | IS
   41    | IN
   42    | OUT
   43    | IS SEMI_COLON
   44    | IN SEMI_COLON
   45    | OUT SEMI_COLON
   46    | ASSIGNMENT_STATE
   47    | ASSIGNMENT_STATE SEMI_COLON
   48    | UNITARY_STATE
   49    | UNITARY_STATE SEMI_COLON
   50    | START_SCOPE BLOCK END_SCOPE

   51 UNITARY_STATE: varConst R_UP
   52              | varConst R_UM

   53 IS: varConst R_IS TYPE

   54 TYPE: INTEGER
   55     | FLOAT
   56     | BOOLEAN
   57     | CHARACTER
   58     | STRING

   59 IN: R_IN COLON varConst

   60 OUT: R_OUT COLON EXP COMMA_OUT

   61 COMMA_OUT: COMMA EXP COMMA_OUT
   62          | %empty

   63 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON PRIMITIVE MATRIX_END R_OF TYPE

   64 MATRIX_ACCESS_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END

   65 EXP: MATRIX_INIT_STATE
   66    | MATRIX_ACCESS_STATE
   67    | UNITARY_STATE
   68    | EXP R_DOT EXP
   69    | EXP COLON COLON EXPLICIT_TYPE
   70    | EXP BOOLEAN_LOGIC EXP
   71    | NOT EXP
   72    | EXP QUESTION EXP COLON EXP
   73    | EXP EQUALITY_TEST EXP
   74    | EXP ORDER_RELATION EXP
   75    | EXP ARITHMETIC_1 EXP
   76    | EXP ARITHMETIC_2 EXP
   77    | '(' EXP ')'
   78    | PRIMITIVE

   79 PRIMITIVE: VAR
   80          | CONST
   81          | INTEGER
   82          | FLOAT
   83          | BOOLEAN
   84          | CHARACTER
   85          | STRING

   86 varConst: VAR
   87         | CONST


Terminals, with rules where they appear

$end (0) 0
'(' (40) 15 25 77
')' (41) 15 25 77
error (256)
BLOCK_INIT (258) 2 16
BLOCK_END (259) 2 16
SEMI_COLON (260) 15 43 44 45 47 49
MATRIX_INIT (261) 23 63 64
MATRIX_END (262) 23 63 64
R_UP (263) 51
R_UM (264) 52
RETURN (265)
R_IF (266) 9
R_ELSE (267) 12
R_WHILE (268) 7 8
R_DO (269) 8
R_FOR (270) 15
R_SWITCH (271) 16
R_CASE (272) 19
R_DEFAULT (273) 20
R_BREAK (274) 21
R_CONTINUE (275) 22
R_IN (276) 59
R_OUT (277) 60
R_IS (278) 53
R_DOT (279) 68
R_OF (280) 63
MTX_INT (281)
MTX_FLOAT (282)
MTX_BOOLEAN (283)
MTX_CHAR (284)
MTX_STRING (285)
INTEGER (286) 54 81
FLOAT (287) 55 82
BOOLEAN (288) 56 83
CHARACTER (289) 57 84
STRING (290) 58 85
VOID (291)
ARITHMETIC_1 (292) 75
ARITHMETIC_2 (293) 76
BOOLEAN_LOGIC (294) 70
EQUALITY_TEST (295) 73
ORDER_RELATION (296) 74
ASSIGNMENT (297) 23 24
NOT (298) 71
COLON (299) 19 20 59 60 63 69 72
QUESTION (300) 72
COMMA (301) 23 28 61 64
VAR (302) 79 86
CONST (303) 80 87
EXPLICIT_TYPE (304) 69
END_LINE (305) 11 16 35


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
BEFORE_THE_BEGINNING (54)
    on left: 1, on right: 0
BLOCK (55)
    on left: 2, on right: 7 8 9 14 15 25 50
START_SCOPE (56)
    on left: 3, on right: 7 8 9 14 25 50
END_SCOPE (57)
    on left: 4, on right: 7 8 9 14 25 50
CMDS (58)
    on left: 5 6, on right: 1 2 5 19 20
WHILE (59)
    on left: 7, on right: 33
DO_WHILE (60)
    on left: 8, on right: 34
IF (61)
    on left: 9, on right: 13 32
ELSES (62)
    on left: 10 11, on right: 9 10
ELSE (63)
    on left: 12, on right: 10
ELSEIF (64)
    on left: 13 14, on right: 12
FOR (65)
    on left: 15, on right: 36
SWITCH (66)
    on left: 16, on right: 37
CASES (67)
    on left: 17 18, on right: 16 18
CASE (68)
    on left: 19, on right: 17 18
DEFAULT (69)
    on left: 20, on right: 17
BREAK (70)
    on left: 21, on right: 38
CONTINUE (71)
    on left: 22, on right: 39
ASSIGNMENT_STATE (72)
    on left: 23 24, on right: 15 46 47
FUNCTION_STATE (73)
    on left: 25, on right: 31
PARAMS (74)
    on left: 26 27, on right: 25
COMMA_PARAMS (75)
    on left: 28 29, on right: 26 28
PARAM (76)
    on left: 30, on right: 26 28
CMD (77)
    on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
    49 50, on right: 5
UNITARY_STATE (78)
    on left: 51 52, on right: 15 48 49 67
IS (79)
    on left: 53, on right: 30 40 43
TYPE (80)
    on left: 54 55 56 57 58, on right: 53 63
IN (81)
    on left: 59, on right: 41 44
OUT (82)
    on left: 60, on right: 42 45
COMMA_OUT (83)
    on left: 61 62, on right: 60 61
MATRIX_INIT_STATE (84)
    on left: 63, on right: 65
MATRIX_ACCESS_STATE (85)
    on left: 64, on right: 66
EXP (86)
    on left: 65 66 67 68 69 70 71 72 73 74 75 76 77 78, on right: 7
    8 9 15 16 19 23 24 60 61 68 69 70 71 72 73 74 75 76 77
PRIMITIVE (87)
    on left: 79 80 81 82 83 84 85, on right: 23 63 64 78
varConst (88)
    on left: 86 87, on right: 23 24 25 51 52 53 59 64


State 0

    0 $accept: . BEFORE_THE_BEGINNING $end

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    $end      reduce using rule 6 (CMDS)
    $default  reduce using rule 3 (START_SCOPE)

    BEFORE_THE_BEGINNING  go to state 13
    START_SCOPE           go to state 14
    CMDS                  go to state 15
    WHILE                 go to state 16
    DO_WHILE              go to state 17
    IF                    go to state 18
    FOR                   go to state 19
    SWITCH                go to state 20
    BREAK                 go to state 21
    CONTINUE              go to state 22
    ASSIGNMENT_STATE      go to state 23
    FUNCTION_STATE        go to state 24
    CMD                   go to state 25
    UNITARY_STATE         go to state 26
    IS                    go to state 27
    IN                    go to state 28
    OUT                   go to state 29
    varConst              go to state 30


State 1

    9 IF: R_IF . EXP START_SCOPE BLOCK END_SCOPE ELSES

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 44
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 2

    7 WHILE: R_WHILE . EXP START_SCOPE BLOCK END_SCOPE

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 47
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 3

    8 DO_WHILE: R_DO . START_SCOPE BLOCK END_SCOPE R_WHILE EXP

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 48


State 4

   15 FOR: R_FOR . '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' BLOCK

    '('  shift, and go to state 49


State 5

   16 SWITCH: R_SWITCH . EXP BLOCK_INIT END_LINE CASES BLOCK_END

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 50
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 6

   21 BREAK: R_BREAK .

    $default  reduce using rule 21 (BREAK)


State 7

   22 CONTINUE: R_CONTINUE .

    $default  reduce using rule 22 (CONTINUE)


State 8

   59 IN: R_IN . COLON varConst

    COLON  shift, and go to state 51


State 9

   60 OUT: R_OUT . COLON EXP COMMA_OUT

    COLON  shift, and go to state 52


State 10

   86 varConst: VAR .

    $default  reduce using rule 86 (varConst)


State 11

   87 varConst: CONST .

    $default  reduce using rule 87 (varConst)


State 12

   35 CMD: END_LINE .

    $default  reduce using rule 35 (CMD)


State 13

    0 $accept: BEFORE_THE_BEGINNING . $end

    $end  shift, and go to state 53


State 14

   50 CMD: START_SCOPE . BLOCK END_SCOPE

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 55


State 15

    1 BEFORE_THE_BEGINNING: CMDS .

    $default  reduce using rule 1 (BEFORE_THE_BEGINNING)


State 16

   33 CMD: WHILE .

    $default  reduce using rule 33 (CMD)


State 17

   34 CMD: DO_WHILE .

    $default  reduce using rule 34 (CMD)


State 18

   32 CMD: IF .

    $default  reduce using rule 32 (CMD)


State 19

   36 CMD: FOR .

    $default  reduce using rule 36 (CMD)


State 20

   37 CMD: SWITCH .

    $default  reduce using rule 37 (CMD)


State 21

   38 CMD: BREAK .

    $default  reduce using rule 38 (CMD)


State 22

   39 CMD: CONTINUE .

    $default  reduce using rule 39 (CMD)


State 23

   46 CMD: ASSIGNMENT_STATE .
   47    | ASSIGNMENT_STATE . SEMI_COLON

    SEMI_COLON  shift, and go to state 56

    $default  reduce using rule 46 (CMD)


State 24

   31 CMD: FUNCTION_STATE .

    $default  reduce using rule 31 (CMD)


State 25

    5 CMDS: CMD . CMDS

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    BLOCK_INIT  reduce using rule 3 (START_SCOPE)
    $default    reduce using rule 6 (CMDS)

    START_SCOPE       go to state 14
    CMDS              go to state 57
    WHILE             go to state 16
    DO_WHILE          go to state 17
    IF                go to state 18
    FOR               go to state 19
    SWITCH            go to state 20
    BREAK             go to state 21
    CONTINUE          go to state 22
    ASSIGNMENT_STATE  go to state 23
    FUNCTION_STATE    go to state 24
    CMD               go to state 25
    UNITARY_STATE     go to state 26
    IS                go to state 27
    IN                go to state 28
    OUT               go to state 29
    varConst          go to state 30


State 26

   48 CMD: UNITARY_STATE .
   49    | UNITARY_STATE . SEMI_COLON

    SEMI_COLON  shift, and go to state 58

    $default  reduce using rule 48 (CMD)


State 27

   40 CMD: IS .
   43    | IS . SEMI_COLON

    SEMI_COLON  shift, and go to state 59

    $default  reduce using rule 40 (CMD)


State 28

   41 CMD: IN .
   44    | IN . SEMI_COLON

    SEMI_COLON  shift, and go to state 60

    $default  reduce using rule 41 (CMD)


State 29

   42 CMD: OUT .
   45    | OUT . SEMI_COLON

    SEMI_COLON  shift, and go to state 61

    $default  reduce using rule 42 (CMD)


State 30

   23 ASSIGNMENT_STATE: varConst . MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP
   24                 | varConst . ASSIGNMENT EXP
   25 FUNCTION_STATE: varConst . START_SCOPE '(' PARAMS ')' BLOCK END_SCOPE
   51 UNITARY_STATE: varConst . R_UP
   52              | varConst . R_UM
   53 IS: varConst . R_IS TYPE

    MATRIX_INIT  shift, and go to state 62
    R_UP         shift, and go to state 63
    R_UM         shift, and go to state 64
    R_IS         shift, and go to state 65
    ASSIGNMENT   shift, and go to state 66

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 67


State 31

   63 MATRIX_INIT_STATE: MATRIX_INIT . PRIMITIVE COLON PRIMITIVE MATRIX_END R_OF TYPE

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 70


State 32

   81 PRIMITIVE: INTEGER .

    $default  reduce using rule 81 (PRIMITIVE)


State 33

   82 PRIMITIVE: FLOAT .

    $default  reduce using rule 82 (PRIMITIVE)


State 34

   83 PRIMITIVE: BOOLEAN .

    $default  reduce using rule 83 (PRIMITIVE)


State 35

   84 PRIMITIVE: CHARACTER .

    $default  reduce using rule 84 (PRIMITIVE)


State 36

   85 PRIMITIVE: STRING .

    $default  reduce using rule 85 (PRIMITIVE)


State 37

   71 EXP: NOT . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 71
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 38

   79 PRIMITIVE: VAR .
   86 varConst: VAR .

    MATRIX_INIT  reduce using rule 86 (varConst)
    R_UP         reduce using rule 86 (varConst)
    R_UM         reduce using rule 86 (varConst)
    $default     reduce using rule 79 (PRIMITIVE)


State 39

   80 PRIMITIVE: CONST .
   87 varConst: CONST .

    MATRIX_INIT  reduce using rule 87 (varConst)
    R_UP         reduce using rule 87 (varConst)
    R_UM         reduce using rule 87 (varConst)
    $default     reduce using rule 80 (PRIMITIVE)


State 40

   77 EXP: '(' . EXP ')'

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 72
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 41

   67 EXP: UNITARY_STATE .

    $default  reduce using rule 67 (EXP)


State 42

   65 EXP: MATRIX_INIT_STATE .

    $default  reduce using rule 65 (EXP)


State 43

   66 EXP: MATRIX_ACCESS_STATE .

    $default  reduce using rule 66 (EXP)


State 44

    9 IF: R_IF EXP . START_SCOPE BLOCK END_SCOPE ELSES
   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 81


State 45

   78 EXP: PRIMITIVE .

    $default  reduce using rule 78 (EXP)


State 46

   51 UNITARY_STATE: varConst . R_UP
   52              | varConst . R_UM
   64 MATRIX_ACCESS_STATE: varConst . MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END

    MATRIX_INIT  shift, and go to state 82
    R_UP         shift, and go to state 63
    R_UM         shift, and go to state 64


State 47

    7 WHILE: R_WHILE EXP . START_SCOPE BLOCK END_SCOPE
   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 83


State 48

    8 DO_WHILE: R_DO START_SCOPE . BLOCK END_SCOPE R_WHILE EXP

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 84


State 49

   15 FOR: R_FOR '(' . ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' BLOCK

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    ASSIGNMENT_STATE  go to state 85
    varConst          go to state 86


State 50

   16 SWITCH: R_SWITCH EXP . BLOCK_INIT END_LINE CASES BLOCK_END
   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    BLOCK_INIT      shift, and go to state 87
    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80


State 51

   59 IN: R_IN COLON . varConst

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    varConst  go to state 88


State 52

   60 OUT: R_OUT COLON . EXP COMMA_OUT

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 89
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 53

    0 $accept: BEFORE_THE_BEGINNING $end .

    $default  accept


State 54

    2 BLOCK: BLOCK_INIT . CMDS BLOCK_END

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    BLOCK_END  reduce using rule 6 (CMDS)
    $default   reduce using rule 3 (START_SCOPE)

    START_SCOPE       go to state 14
    CMDS              go to state 90
    WHILE             go to state 16
    DO_WHILE          go to state 17
    IF                go to state 18
    FOR               go to state 19
    SWITCH            go to state 20
    BREAK             go to state 21
    CONTINUE          go to state 22
    ASSIGNMENT_STATE  go to state 23
    FUNCTION_STATE    go to state 24
    CMD               go to state 25
    UNITARY_STATE     go to state 26
    IS                go to state 27
    IN                go to state 28
    OUT               go to state 29
    varConst          go to state 30


State 55

   50 CMD: START_SCOPE BLOCK . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 91


State 56

   47 CMD: ASSIGNMENT_STATE SEMI_COLON .

    $default  reduce using rule 47 (CMD)


State 57

    5 CMDS: CMD CMDS .

    $default  reduce using rule 5 (CMDS)


State 58

   49 CMD: UNITARY_STATE SEMI_COLON .

    $default  reduce using rule 49 (CMD)


State 59

   43 CMD: IS SEMI_COLON .

    $default  reduce using rule 43 (CMD)


State 60

   44 CMD: IN SEMI_COLON .

    $default  reduce using rule 44 (CMD)


State 61

   45 CMD: OUT SEMI_COLON .

    $default  reduce using rule 45 (CMD)


State 62

   23 ASSIGNMENT_STATE: varConst MATRIX_INIT . PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 92


State 63

   51 UNITARY_STATE: varConst R_UP .

    $default  reduce using rule 51 (UNITARY_STATE)


State 64

   52 UNITARY_STATE: varConst R_UM .

    $default  reduce using rule 52 (UNITARY_STATE)


State 65

   53 IS: varConst R_IS . TYPE

    INTEGER    shift, and go to state 93
    FLOAT      shift, and go to state 94
    BOOLEAN    shift, and go to state 95
    CHARACTER  shift, and go to state 96
    STRING     shift, and go to state 97

    TYPE  go to state 98


State 66

   24 ASSIGNMENT_STATE: varConst ASSIGNMENT . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 99
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 67

   25 FUNCTION_STATE: varConst START_SCOPE . '(' PARAMS ')' BLOCK END_SCOPE

    '('  shift, and go to state 100


State 68

   79 PRIMITIVE: VAR .

    $default  reduce using rule 79 (PRIMITIVE)


State 69

   80 PRIMITIVE: CONST .

    $default  reduce using rule 80 (PRIMITIVE)


State 70

   63 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE . COLON PRIMITIVE MATRIX_END R_OF TYPE

    COLON  shift, and go to state 101


State 71

   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   71    | NOT EXP .
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 73
    ARITHMETIC_1  shift, and go to state 74
    ARITHMETIC_2  shift, and go to state 75

    $default  reduce using rule 71 (EXP)


State 72

   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP
   77    | '(' EXP . ')'

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80
    ')'             shift, and go to state 102


State 73

   68 EXP: EXP R_DOT . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 103
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 74

   75 EXP: EXP ARITHMETIC_1 . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 104
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 75

   76 EXP: EXP ARITHMETIC_2 . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 105
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 76

   70 EXP: EXP BOOLEAN_LOGIC . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 106
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 77

   73 EXP: EXP EQUALITY_TEST . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 107
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 78

   74 EXP: EXP ORDER_RELATION . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 108
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 79

   69 EXP: EXP COLON . COLON EXPLICIT_TYPE

    COLON  shift, and go to state 109


State 80

   72 EXP: EXP QUESTION . EXP COLON EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 110
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 81

    9 IF: R_IF EXP START_SCOPE . BLOCK END_SCOPE ELSES

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 111


State 82

   64 MATRIX_ACCESS_STATE: varConst MATRIX_INIT . PRIMITIVE COMMA PRIMITIVE MATRIX_END

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 112


State 83

    7 WHILE: R_WHILE EXP START_SCOPE . BLOCK END_SCOPE

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 113


State 84

    8 DO_WHILE: R_DO START_SCOPE BLOCK . END_SCOPE R_WHILE EXP

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 114


State 85

   15 FOR: R_FOR '(' ASSIGNMENT_STATE . SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' BLOCK

    SEMI_COLON  shift, and go to state 115


State 86

   23 ASSIGNMENT_STATE: varConst . MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP
   24                 | varConst . ASSIGNMENT EXP

    MATRIX_INIT  shift, and go to state 62
    ASSIGNMENT   shift, and go to state 66


State 87

   16 SWITCH: R_SWITCH EXP BLOCK_INIT . END_LINE CASES BLOCK_END

    END_LINE  shift, and go to state 116


State 88

   59 IN: R_IN COLON varConst .

    $default  reduce using rule 59 (IN)


State 89

   60 OUT: R_OUT COLON EXP . COMMA_OUT
   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80
    COMMA           shift, and go to state 117

    $default  reduce using rule 62 (COMMA_OUT)

    COMMA_OUT  go to state 118


State 90

    2 BLOCK: BLOCK_INIT CMDS . BLOCK_END

    BLOCK_END  shift, and go to state 119


State 91

   50 CMD: START_SCOPE BLOCK END_SCOPE .

    $default  reduce using rule 50 (CMD)


State 92

   23 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE . COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP

    COMMA  shift, and go to state 120


State 93

   54 TYPE: INTEGER .

    $default  reduce using rule 54 (TYPE)


State 94

   55 TYPE: FLOAT .

    $default  reduce using rule 55 (TYPE)


State 95

   56 TYPE: BOOLEAN .

    $default  reduce using rule 56 (TYPE)


State 96

   57 TYPE: CHARACTER .

    $default  reduce using rule 57 (TYPE)


State 97

   58 TYPE: STRING .

    $default  reduce using rule 58 (TYPE)


State 98

   53 IS: varConst R_IS TYPE .

    $default  reduce using rule 53 (IS)


State 99

   24 ASSIGNMENT_STATE: varConst ASSIGNMENT EXP .
   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 24 (ASSIGNMENT_STATE)


State 100

   25 FUNCTION_STATE: varConst START_SCOPE '(' . PARAMS ')' BLOCK END_SCOPE

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    $default  reduce using rule 27 (PARAMS)

    PARAMS    go to state 121
    PARAM     go to state 122
    IS        go to state 123
    varConst  go to state 124


State 101

   63 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON . PRIMITIVE MATRIX_END R_OF TYPE

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 125


State 102

   77 EXP: '(' EXP ')' .

    $default  reduce using rule 77 (EXP)


State 103

   68 EXP: EXP . R_DOT EXP
   68    | EXP R_DOT EXP .
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    ARITHMETIC_1  shift, and go to state 74
    ARITHMETIC_2  shift, and go to state 75

    $default  reduce using rule 68 (EXP)


State 104

   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   75    | EXP ARITHMETIC_1 EXP .
   76    | EXP . ARITHMETIC_2 EXP

    ARITHMETIC_2  shift, and go to state 75

    $default  reduce using rule 75 (EXP)


State 105

   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP
   76    | EXP ARITHMETIC_2 EXP .

    $default  reduce using rule 76 (EXP)


State 106

   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   70    | EXP BOOLEAN_LOGIC EXP .
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 70 (EXP)


State 107

   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   73    | EXP EQUALITY_TEST EXP .
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 73
    ARITHMETIC_1  shift, and go to state 74
    ARITHMETIC_2  shift, and go to state 75
    COLON         shift, and go to state 79
    QUESTION      shift, and go to state 80

    $default  reduce using rule 73 (EXP)


State 108

   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   74    | EXP ORDER_RELATION EXP .
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 73
    ARITHMETIC_1  shift, and go to state 74
    ARITHMETIC_2  shift, and go to state 75
    COLON         shift, and go to state 79
    QUESTION      shift, and go to state 80

    $default  reduce using rule 74 (EXP)


State 109

   69 EXP: EXP COLON COLON . EXPLICIT_TYPE

    EXPLICIT_TYPE  shift, and go to state 126


State 110

   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   72    | EXP QUESTION EXP . COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 127
    QUESTION        shift, and go to state 80


State 111

    9 IF: R_IF EXP START_SCOPE BLOCK . END_SCOPE ELSES

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 128


State 112

   64 MATRIX_ACCESS_STATE: varConst MATRIX_INIT PRIMITIVE . COMMA PRIMITIVE MATRIX_END

    COMMA  shift, and go to state 129


State 113

    7 WHILE: R_WHILE EXP START_SCOPE BLOCK . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 130


State 114

    8 DO_WHILE: R_DO START_SCOPE BLOCK END_SCOPE . R_WHILE EXP

    R_WHILE  shift, and go to state 131


State 115

   15 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON . EXP SEMI_COLON UNITARY_STATE ')' BLOCK

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 132
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 116

   16 SWITCH: R_SWITCH EXP BLOCK_INIT END_LINE . CASES BLOCK_END

    R_CASE  shift, and go to state 133

    CASES  go to state 134
    CASE   go to state 135


State 117

   61 COMMA_OUT: COMMA . EXP COMMA_OUT

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 136
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 118

   60 OUT: R_OUT COLON EXP COMMA_OUT .

    $default  reduce using rule 60 (OUT)


State 119

    2 BLOCK: BLOCK_INIT CMDS BLOCK_END .

    $default  reduce using rule 2 (BLOCK)


State 120

   23 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA . PRIMITIVE MATRIX_END ASSIGNMENT EXP

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 137


State 121

   25 FUNCTION_STATE: varConst START_SCOPE '(' PARAMS . ')' BLOCK END_SCOPE

    ')'  shift, and go to state 138


State 122

   26 PARAMS: PARAM . COMMA_PARAMS

    COMMA  shift, and go to state 139

    $default  reduce using rule 29 (COMMA_PARAMS)

    COMMA_PARAMS  go to state 140


State 123

   30 PARAM: IS .

    $default  reduce using rule 30 (PARAM)


State 124

   53 IS: varConst . R_IS TYPE

    R_IS  shift, and go to state 65


State 125

   63 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON PRIMITIVE . MATRIX_END R_OF TYPE

    MATRIX_END  shift, and go to state 141


State 126

   69 EXP: EXP COLON COLON EXPLICIT_TYPE .

    $default  reduce using rule 69 (EXP)


State 127

   69 EXP: EXP COLON . COLON EXPLICIT_TYPE
   72    | EXP QUESTION EXP COLON . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    COLON        shift, and go to state 109
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 142
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 128

    9 IF: R_IF EXP START_SCOPE BLOCK END_SCOPE . ELSES

    END_LINE  shift, and go to state 143

    ELSES  go to state 144


State 129

   64 MATRIX_ACCESS_STATE: varConst MATRIX_INIT PRIMITIVE COMMA . PRIMITIVE MATRIX_END

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 145


State 130

    7 WHILE: R_WHILE EXP START_SCOPE BLOCK END_SCOPE .

    $default  reduce using rule 7 (WHILE)


State 131

    8 DO_WHILE: R_DO START_SCOPE BLOCK END_SCOPE R_WHILE . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 146
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 132

   15 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP . SEMI_COLON UNITARY_STATE ')' BLOCK
   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    SEMI_COLON      shift, and go to state 147
    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80


State 133

   19 CASE: R_CASE . EXP COLON CMDS

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 148
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 134

   16 SWITCH: R_SWITCH EXP BLOCK_INIT END_LINE CASES . BLOCK_END

    BLOCK_END  shift, and go to state 149


State 135

   17 CASES: CASE . DEFAULT
   18      | CASE . CASES

    R_CASE     shift, and go to state 133
    R_DEFAULT  shift, and go to state 150

    CASES    go to state 151
    CASE     go to state 135
    DEFAULT  go to state 152


State 136

   61 COMMA_OUT: COMMA EXP . COMMA_OUT
   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80
    COMMA           shift, and go to state 117

    $default  reduce using rule 62 (COMMA_OUT)

    COMMA_OUT  go to state 153


State 137

   23 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE . MATRIX_END ASSIGNMENT EXP

    MATRIX_END  shift, and go to state 154


State 138

   25 FUNCTION_STATE: varConst START_SCOPE '(' PARAMS ')' . BLOCK END_SCOPE

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 155


State 139

   28 COMMA_PARAMS: COMMA . PARAM COMMA_PARAMS

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    PARAM     go to state 156
    IS        go to state 123
    varConst  go to state 124


State 140

   26 PARAMS: PARAM COMMA_PARAMS .

    $default  reduce using rule 26 (PARAMS)


State 141

   63 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON PRIMITIVE MATRIX_END . R_OF TYPE

    R_OF  shift, and go to state 157


State 142

   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   72    | EXP QUESTION EXP COLON EXP .
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 73
    ARITHMETIC_1  shift, and go to state 74
    ARITHMETIC_2  shift, and go to state 75

    $default  reduce using rule 72 (EXP)


State 143

   11 ELSES: END_LINE .

    $default  reduce using rule 11 (ELSES)


State 144

    9 IF: R_IF EXP START_SCOPE BLOCK END_SCOPE ELSES .
   10 ELSES: ELSES . ELSE

    R_ELSE  shift, and go to state 158

    R_ELSE    [reduce using rule 9 (IF)]
    $default  reduce using rule 9 (IF)

    ELSE  go to state 159


State 145

   64 MATRIX_ACCESS_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE . MATRIX_END

    MATRIX_END  shift, and go to state 160


State 146

    8 DO_WHILE: R_DO START_SCOPE BLOCK END_SCOPE R_WHILE EXP .
   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 8 (DO_WHILE)


State 147

   15 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON . UNITARY_STATE ')' BLOCK

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    UNITARY_STATE  go to state 161
    varConst       go to state 162


State 148

   19 CASE: R_CASE EXP . COLON CMDS
   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 163
    QUESTION        shift, and go to state 80


State 149

   16 SWITCH: R_SWITCH EXP BLOCK_INIT END_LINE CASES BLOCK_END .

    $default  reduce using rule 16 (SWITCH)


State 150

   20 DEFAULT: R_DEFAULT . COLON CMDS

    COLON  shift, and go to state 164


State 151

   18 CASES: CASE CASES .

    $default  reduce using rule 18 (CASES)


State 152

   17 CASES: CASE DEFAULT .

    $default  reduce using rule 17 (CASES)


State 153

   61 COMMA_OUT: COMMA EXP COMMA_OUT .

    $default  reduce using rule 61 (COMMA_OUT)


State 154

   23 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END . ASSIGNMENT EXP

    ASSIGNMENT  shift, and go to state 165


State 155

   25 FUNCTION_STATE: varConst START_SCOPE '(' PARAMS ')' BLOCK . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 166


State 156

   28 COMMA_PARAMS: COMMA PARAM . COMMA_PARAMS

    COMMA  shift, and go to state 139

    $default  reduce using rule 29 (COMMA_PARAMS)

    COMMA_PARAMS  go to state 167


State 157

   63 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON PRIMITIVE MATRIX_END R_OF . TYPE

    INTEGER    shift, and go to state 93
    FLOAT      shift, and go to state 94
    BOOLEAN    shift, and go to state 95
    CHARACTER  shift, and go to state 96
    STRING     shift, and go to state 97

    TYPE  go to state 168


State 158

   12 ELSE: R_ELSE . ELSEIF

    R_IF  shift, and go to state 1

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 169
    IF           go to state 170
    ELSEIF       go to state 171


State 159

   10 ELSES: ELSES ELSE .

    $default  reduce using rule 10 (ELSES)


State 160

   64 MATRIX_ACCESS_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END .

    $default  reduce using rule 64 (MATRIX_ACCESS_STATE)


State 161

   15 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE . ')' BLOCK

    ')'  shift, and go to state 172


State 162

   51 UNITARY_STATE: varConst . R_UP
   52              | varConst . R_UM

    R_UP  shift, and go to state 63
    R_UM  shift, and go to state 64


State 163

   19 CASE: R_CASE EXP COLON . CMDS
   69 EXP: EXP COLON . COLON EXPLICIT_TYPE

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    COLON       shift, and go to state 109
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    BLOCK_INIT  reduce using rule 3 (START_SCOPE)
    $default    reduce using rule 6 (CMDS)

    START_SCOPE       go to state 14
    CMDS              go to state 173
    WHILE             go to state 16
    DO_WHILE          go to state 17
    IF                go to state 18
    FOR               go to state 19
    SWITCH            go to state 20
    BREAK             go to state 21
    CONTINUE          go to state 22
    ASSIGNMENT_STATE  go to state 23
    FUNCTION_STATE    go to state 24
    CMD               go to state 25
    UNITARY_STATE     go to state 26
    IS                go to state 27
    IN                go to state 28
    OUT               go to state 29
    varConst          go to state 30


State 164

   20 DEFAULT: R_DEFAULT COLON . CMDS

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    BLOCK_END  reduce using rule 6 (CMDS)
    $default   reduce using rule 3 (START_SCOPE)

    START_SCOPE       go to state 14
    CMDS              go to state 174
    WHILE             go to state 16
    DO_WHILE          go to state 17
    IF                go to state 18
    FOR               go to state 19
    SWITCH            go to state 20
    BREAK             go to state 21
    CONTINUE          go to state 22
    ASSIGNMENT_STATE  go to state 23
    FUNCTION_STATE    go to state 24
    CMD               go to state 25
    UNITARY_STATE     go to state 26
    IS                go to state 27
    IN                go to state 28
    OUT               go to state 29
    varConst          go to state 30


State 165

   23 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 175
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 166

   25 FUNCTION_STATE: varConst START_SCOPE '(' PARAMS ')' BLOCK END_SCOPE .

    $default  reduce using rule 25 (FUNCTION_STATE)


State 167

   28 COMMA_PARAMS: COMMA PARAM COMMA_PARAMS .

    $default  reduce using rule 28 (COMMA_PARAMS)


State 168

   63 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON PRIMITIVE MATRIX_END R_OF TYPE .

    $default  reduce using rule 63 (MATRIX_INIT_STATE)


State 169

   14 ELSEIF: START_SCOPE . BLOCK END_SCOPE

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 176


State 170

   13 ELSEIF: IF .

    $default  reduce using rule 13 (ELSEIF)


State 171

   12 ELSE: R_ELSE ELSEIF .

    $default  reduce using rule 12 (ELSE)


State 172

   15 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' . BLOCK

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 177


State 173

   19 CASE: R_CASE EXP COLON CMDS .

    $default  reduce using rule 19 (CASE)


State 174

   20 DEFAULT: R_DEFAULT COLON CMDS .

    $default  reduce using rule 20 (DEFAULT)


State 175

   23 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP .
   68 EXP: EXP . R_DOT EXP
   69    | EXP . COLON COLON EXPLICIT_TYPE
   70    | EXP . BOOLEAN_LOGIC EXP
   72    | EXP . QUESTION EXP COLON EXP
   73    | EXP . EQUALITY_TEST EXP
   74    | EXP . ORDER_RELATION EXP
   75    | EXP . ARITHMETIC_1 EXP
   76    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 23 (ASSIGNMENT_STATE)


State 176

   14 ELSEIF: START_SCOPE BLOCK . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 178


State 177

   15 FOR: R_FOR '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON UNITARY_STATE ')' BLOCK .

    $default  reduce using rule 15 (FOR)


State 178

   14 ELSEIF: START_SCOPE BLOCK END_SCOPE .

    $default  reduce using rule 14 (ELSEIF)
