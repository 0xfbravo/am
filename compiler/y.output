Terminals unused in grammar

   RETURN
   MTX_INT
   MTX_FLOAT
   MTX_BOOLEAN
   MTX_CHAR
   MTX_STRING
   VOID


State 128 conflicts: 2 shift/reduce
State 144 conflicts: 2 shift/reduce


Grammar

    0 $accept: BEFORE_THE_BEGINNING $end

    1 BEFORE_THE_BEGINNING: CMDS

    2 BLOCK: BLOCK_INIT CMDS BLOCK_END

    3 START_SCOPE: %empty

    4 END_SCOPE: %empty

    5 CMDS: CMD CMDS
    6     | %empty

    7 WHILE: R_WHILE EXP START_SCOPE BLOCK END_SCOPE

    8 DO_WHILE: R_DO START_SCOPE BLOCK END_SCOPE R_WHILE EXP

    9 IF: R_IF EXP START_SCOPE BLOCK END_SCOPE ELSES

   10 ELSES: ELSE ELSES
   11      | %empty

   12 ELSE: R_ELSE ELSEIF
   13     | END_LINE

   14 ELSEIF: IF
   15       | START_SCOPE BLOCK END_SCOPE

   16 FOR: R_FOR START_SCOPE '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON FOR_EXP_STATE ')' BLOCK END_SCOPE

   17 FOR_EXP_STATE: UNITARY_STATE
   18              | ASSIGNMENT_STATE

   19 SWITCH: R_SWITCH EXP START_SCOPE BLOCK_INIT END_LINE CASES BLOCK_END END_SCOPE

   20 CASES: CASE DEFAULT
   21      | CASE CASES

   22 CASE: R_CASE EXP COLON START_SCOPE CMDS END_SCOPE

   23 DEFAULT: R_DEFAULT COLON START_SCOPE CMDS END_SCOPE

   24 BREAK: R_BREAK

   25 CONTINUE: R_CONTINUE

   26 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP
   27                 | varConst ASSIGNMENT EXP

   28 FUNCTION_STATE: varConst START_SCOPE '(' PARAMS ')' BLOCK END_SCOPE

   29 PARAMS: PARAM COMMA_PARAMS
   30       | %empty

   31 COMMA_PARAMS: COMMA PARAM COMMA_PARAMS
   32             | %empty

   33 PARAM: IS

   34 CMD: FUNCTION_STATE
   35    | IF
   36    | WHILE
   37    | DO_WHILE
   38    | END_LINE
   39    | FOR
   40    | SWITCH
   41    | BREAK
   42    | CONTINUE
   43    | IS
   44    | IN
   45    | OUT
   46    | IS SEMI_COLON
   47    | IN SEMI_COLON
   48    | OUT SEMI_COLON
   49    | ASSIGNMENT_STATE
   50    | ASSIGNMENT_STATE SEMI_COLON
   51    | UNITARY_STATE
   52    | UNITARY_STATE SEMI_COLON
   53    | START_SCOPE BLOCK END_SCOPE

   54 UNITARY_STATE: varConst R_UP
   55              | varConst R_UM

   56 IS: varConst R_IS TYPE

   57 TYPE: INTEGER
   58     | FLOAT
   59     | BOOLEAN
   60     | CHARACTER
   61     | STRING

   62 IN: R_IN COLON varConst

   63 OUT: R_OUT COLON EXP COMMA_OUT

   64 COMMA_OUT: COMMA EXP COMMA_OUT
   65          | %empty

   66 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON PRIMITIVE MATRIX_END R_OF TYPE

   67 MATRIX_ACCESS_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END

   68 EXP: MATRIX_INIT_STATE
   69    | MATRIX_ACCESS_STATE
   70    | UNITARY_STATE
   71    | EXP R_DOT EXP
   72    | EXP COLON COLON EXPLICIT_TYPE
   73    | EXP BOOLEAN_LOGIC EXP
   74    | NOT EXP
   75    | EXP QUESTION EXP COLON EXP
   76    | EXP EQUALITY_TEST EXP
   77    | EXP ORDER_RELATION EXP
   78    | EXP ARITHMETIC_1 EXP
   79    | EXP ARITHMETIC_2 EXP
   80    | '(' EXP ')'
   81    | PRIMITIVE

   82 PRIMITIVE: VAR
   83          | CONST
   84          | INTEGER
   85          | FLOAT
   86          | BOOLEAN
   87          | CHARACTER
   88          | STRING

   89 varConst: VAR
   90         | CONST


Terminals, with rules where they appear

$end (0) 0
'(' (40) 16 28 80
')' (41) 16 28 80
error (256)
BLOCK_INIT (258) 2 19
BLOCK_END (259) 2 19
SEMI_COLON (260) 16 46 47 48 50 52
MATRIX_INIT (261) 26 66 67
MATRIX_END (262) 26 66 67
R_UP (263) 54
R_UM (264) 55
RETURN (265)
R_IF (266) 9
R_ELSE (267) 12
R_WHILE (268) 7 8
R_DO (269) 8
R_FOR (270) 16
R_SWITCH (271) 19
R_CASE (272) 22
R_DEFAULT (273) 23
R_BREAK (274) 24
R_CONTINUE (275) 25
R_IN (276) 62
R_OUT (277) 63
R_IS (278) 56
R_DOT (279) 71
R_OF (280) 66
MTX_INT (281)
MTX_FLOAT (282)
MTX_BOOLEAN (283)
MTX_CHAR (284)
MTX_STRING (285)
INTEGER (286) 57 84
FLOAT (287) 58 85
BOOLEAN (288) 59 86
CHARACTER (289) 60 87
STRING (290) 61 88
VOID (291)
ARITHMETIC_1 (292) 78
ARITHMETIC_2 (293) 79
BOOLEAN_LOGIC (294) 73
EQUALITY_TEST (295) 76
ORDER_RELATION (296) 77
ASSIGNMENT (297) 26 27
NOT (298) 74
COLON (299) 22 23 62 63 66 72 75
QUESTION (300) 75
COMMA (301) 26 31 64 67
VAR (302) 82 89
CONST (303) 83 90
EXPLICIT_TYPE (304) 72
END_LINE (305) 13 19 38


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
BEFORE_THE_BEGINNING (54)
    on left: 1, on right: 0
BLOCK (55)
    on left: 2, on right: 7 8 9 15 16 28 53
START_SCOPE (56)
    on left: 3, on right: 7 8 9 15 16 19 22 23 28 53
END_SCOPE (57)
    on left: 4, on right: 7 8 9 15 16 19 22 23 28 53
CMDS (58)
    on left: 5 6, on right: 1 2 5 22 23
WHILE (59)
    on left: 7, on right: 36
DO_WHILE (60)
    on left: 8, on right: 37
IF (61)
    on left: 9, on right: 14 35
ELSES (62)
    on left: 10 11, on right: 9 10
ELSE (63)
    on left: 12 13, on right: 10
ELSEIF (64)
    on left: 14 15, on right: 12
FOR (65)
    on left: 16, on right: 39
FOR_EXP_STATE (66)
    on left: 17 18, on right: 16
SWITCH (67)
    on left: 19, on right: 40
CASES (68)
    on left: 20 21, on right: 19 21
CASE (69)
    on left: 22, on right: 20 21
DEFAULT (70)
    on left: 23, on right: 20
BREAK (71)
    on left: 24, on right: 41
CONTINUE (72)
    on left: 25, on right: 42
ASSIGNMENT_STATE (73)
    on left: 26 27, on right: 16 18 49 50
FUNCTION_STATE (74)
    on left: 28, on right: 34
PARAMS (75)
    on left: 29 30, on right: 28
COMMA_PARAMS (76)
    on left: 31 32, on right: 29 31
PARAM (77)
    on left: 33, on right: 29 31
CMD (78)
    on left: 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
    52 53, on right: 5
UNITARY_STATE (79)
    on left: 54 55, on right: 17 51 52 70
IS (80)
    on left: 56, on right: 33 43 46
TYPE (81)
    on left: 57 58 59 60 61, on right: 56 66
IN (82)
    on left: 62, on right: 44 47
OUT (83)
    on left: 63, on right: 45 48
COMMA_OUT (84)
    on left: 64 65, on right: 63 64
MATRIX_INIT_STATE (85)
    on left: 66, on right: 68
MATRIX_ACCESS_STATE (86)
    on left: 67, on right: 69
EXP (87)
    on left: 68 69 70 71 72 73 74 75 76 77 78 79 80 81, on right: 7
    8 9 16 19 22 26 27 63 64 71 72 73 74 75 76 77 78 79 80
PRIMITIVE (88)
    on left: 82 83 84 85 86 87 88, on right: 26 66 67 81
varConst (89)
    on left: 89 90, on right: 26 27 28 54 55 56 62 67


State 0

    0 $accept: . BEFORE_THE_BEGINNING $end

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    $end      reduce using rule 6 (CMDS)
    $default  reduce using rule 3 (START_SCOPE)

    BEFORE_THE_BEGINNING  go to state 13
    START_SCOPE           go to state 14
    CMDS                  go to state 15
    WHILE                 go to state 16
    DO_WHILE              go to state 17
    IF                    go to state 18
    FOR                   go to state 19
    SWITCH                go to state 20
    BREAK                 go to state 21
    CONTINUE              go to state 22
    ASSIGNMENT_STATE      go to state 23
    FUNCTION_STATE        go to state 24
    CMD                   go to state 25
    UNITARY_STATE         go to state 26
    IS                    go to state 27
    IN                    go to state 28
    OUT                   go to state 29
    varConst              go to state 30


State 1

    9 IF: R_IF . EXP START_SCOPE BLOCK END_SCOPE ELSES

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 44
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 2

    7 WHILE: R_WHILE . EXP START_SCOPE BLOCK END_SCOPE

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 47
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 3

    8 DO_WHILE: R_DO . START_SCOPE BLOCK END_SCOPE R_WHILE EXP

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 48


State 4

   16 FOR: R_FOR . START_SCOPE '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON FOR_EXP_STATE ')' BLOCK END_SCOPE

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 49


State 5

   19 SWITCH: R_SWITCH . EXP START_SCOPE BLOCK_INIT END_LINE CASES BLOCK_END END_SCOPE

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 50
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 6

   24 BREAK: R_BREAK .

    $default  reduce using rule 24 (BREAK)


State 7

   25 CONTINUE: R_CONTINUE .

    $default  reduce using rule 25 (CONTINUE)


State 8

   62 IN: R_IN . COLON varConst

    COLON  shift, and go to state 51


State 9

   63 OUT: R_OUT . COLON EXP COMMA_OUT

    COLON  shift, and go to state 52


State 10

   89 varConst: VAR .

    $default  reduce using rule 89 (varConst)


State 11

   90 varConst: CONST .

    $default  reduce using rule 90 (varConst)


State 12

   38 CMD: END_LINE .

    $default  reduce using rule 38 (CMD)


State 13

    0 $accept: BEFORE_THE_BEGINNING . $end

    $end  shift, and go to state 53


State 14

   53 CMD: START_SCOPE . BLOCK END_SCOPE

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 55


State 15

    1 BEFORE_THE_BEGINNING: CMDS .

    $default  reduce using rule 1 (BEFORE_THE_BEGINNING)


State 16

   36 CMD: WHILE .

    $default  reduce using rule 36 (CMD)


State 17

   37 CMD: DO_WHILE .

    $default  reduce using rule 37 (CMD)


State 18

   35 CMD: IF .

    $default  reduce using rule 35 (CMD)


State 19

   39 CMD: FOR .

    $default  reduce using rule 39 (CMD)


State 20

   40 CMD: SWITCH .

    $default  reduce using rule 40 (CMD)


State 21

   41 CMD: BREAK .

    $default  reduce using rule 41 (CMD)


State 22

   42 CMD: CONTINUE .

    $default  reduce using rule 42 (CMD)


State 23

   49 CMD: ASSIGNMENT_STATE .
   50    | ASSIGNMENT_STATE . SEMI_COLON

    SEMI_COLON  shift, and go to state 56

    $default  reduce using rule 49 (CMD)


State 24

   34 CMD: FUNCTION_STATE .

    $default  reduce using rule 34 (CMD)


State 25

    5 CMDS: CMD . CMDS

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    BLOCK_INIT  reduce using rule 3 (START_SCOPE)
    $default    reduce using rule 6 (CMDS)

    START_SCOPE       go to state 14
    CMDS              go to state 57
    WHILE             go to state 16
    DO_WHILE          go to state 17
    IF                go to state 18
    FOR               go to state 19
    SWITCH            go to state 20
    BREAK             go to state 21
    CONTINUE          go to state 22
    ASSIGNMENT_STATE  go to state 23
    FUNCTION_STATE    go to state 24
    CMD               go to state 25
    UNITARY_STATE     go to state 26
    IS                go to state 27
    IN                go to state 28
    OUT               go to state 29
    varConst          go to state 30


State 26

   51 CMD: UNITARY_STATE .
   52    | UNITARY_STATE . SEMI_COLON

    SEMI_COLON  shift, and go to state 58

    $default  reduce using rule 51 (CMD)


State 27

   43 CMD: IS .
   46    | IS . SEMI_COLON

    SEMI_COLON  shift, and go to state 59

    $default  reduce using rule 43 (CMD)


State 28

   44 CMD: IN .
   47    | IN . SEMI_COLON

    SEMI_COLON  shift, and go to state 60

    $default  reduce using rule 44 (CMD)


State 29

   45 CMD: OUT .
   48    | OUT . SEMI_COLON

    SEMI_COLON  shift, and go to state 61

    $default  reduce using rule 45 (CMD)


State 30

   26 ASSIGNMENT_STATE: varConst . MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP
   27                 | varConst . ASSIGNMENT EXP
   28 FUNCTION_STATE: varConst . START_SCOPE '(' PARAMS ')' BLOCK END_SCOPE
   54 UNITARY_STATE: varConst . R_UP
   55              | varConst . R_UM
   56 IS: varConst . R_IS TYPE

    MATRIX_INIT  shift, and go to state 62
    R_UP         shift, and go to state 63
    R_UM         shift, and go to state 64
    R_IS         shift, and go to state 65
    ASSIGNMENT   shift, and go to state 66

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 67


State 31

   66 MATRIX_INIT_STATE: MATRIX_INIT . PRIMITIVE COLON PRIMITIVE MATRIX_END R_OF TYPE

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 70


State 32

   84 PRIMITIVE: INTEGER .

    $default  reduce using rule 84 (PRIMITIVE)


State 33

   85 PRIMITIVE: FLOAT .

    $default  reduce using rule 85 (PRIMITIVE)


State 34

   86 PRIMITIVE: BOOLEAN .

    $default  reduce using rule 86 (PRIMITIVE)


State 35

   87 PRIMITIVE: CHARACTER .

    $default  reduce using rule 87 (PRIMITIVE)


State 36

   88 PRIMITIVE: STRING .

    $default  reduce using rule 88 (PRIMITIVE)


State 37

   74 EXP: NOT . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 71
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 38

   82 PRIMITIVE: VAR .
   89 varConst: VAR .

    MATRIX_INIT  reduce using rule 89 (varConst)
    R_UP         reduce using rule 89 (varConst)
    R_UM         reduce using rule 89 (varConst)
    $default     reduce using rule 82 (PRIMITIVE)


State 39

   83 PRIMITIVE: CONST .
   90 varConst: CONST .

    MATRIX_INIT  reduce using rule 90 (varConst)
    R_UP         reduce using rule 90 (varConst)
    R_UM         reduce using rule 90 (varConst)
    $default     reduce using rule 83 (PRIMITIVE)


State 40

   80 EXP: '(' . EXP ')'

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 72
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 41

   70 EXP: UNITARY_STATE .

    $default  reduce using rule 70 (EXP)


State 42

   68 EXP: MATRIX_INIT_STATE .

    $default  reduce using rule 68 (EXP)


State 43

   69 EXP: MATRIX_ACCESS_STATE .

    $default  reduce using rule 69 (EXP)


State 44

    9 IF: R_IF EXP . START_SCOPE BLOCK END_SCOPE ELSES
   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 81


State 45

   81 EXP: PRIMITIVE .

    $default  reduce using rule 81 (EXP)


State 46

   54 UNITARY_STATE: varConst . R_UP
   55              | varConst . R_UM
   67 MATRIX_ACCESS_STATE: varConst . MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END

    MATRIX_INIT  shift, and go to state 82
    R_UP         shift, and go to state 63
    R_UM         shift, and go to state 64


State 47

    7 WHILE: R_WHILE EXP . START_SCOPE BLOCK END_SCOPE
   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 83


State 48

    8 DO_WHILE: R_DO START_SCOPE . BLOCK END_SCOPE R_WHILE EXP

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 84


State 49

   16 FOR: R_FOR START_SCOPE . '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON FOR_EXP_STATE ')' BLOCK END_SCOPE

    '('  shift, and go to state 85


State 50

   19 SWITCH: R_SWITCH EXP . START_SCOPE BLOCK_INIT END_LINE CASES BLOCK_END END_SCOPE
   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 86


State 51

   62 IN: R_IN COLON . varConst

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    varConst  go to state 87


State 52

   63 OUT: R_OUT COLON . EXP COMMA_OUT

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 88
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 53

    0 $accept: BEFORE_THE_BEGINNING $end .

    $default  accept


State 54

    2 BLOCK: BLOCK_INIT . CMDS BLOCK_END

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    BLOCK_END  reduce using rule 6 (CMDS)
    $default   reduce using rule 3 (START_SCOPE)

    START_SCOPE       go to state 14
    CMDS              go to state 89
    WHILE             go to state 16
    DO_WHILE          go to state 17
    IF                go to state 18
    FOR               go to state 19
    SWITCH            go to state 20
    BREAK             go to state 21
    CONTINUE          go to state 22
    ASSIGNMENT_STATE  go to state 23
    FUNCTION_STATE    go to state 24
    CMD               go to state 25
    UNITARY_STATE     go to state 26
    IS                go to state 27
    IN                go to state 28
    OUT               go to state 29
    varConst          go to state 30


State 55

   53 CMD: START_SCOPE BLOCK . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 90


State 56

   50 CMD: ASSIGNMENT_STATE SEMI_COLON .

    $default  reduce using rule 50 (CMD)


State 57

    5 CMDS: CMD CMDS .

    $default  reduce using rule 5 (CMDS)


State 58

   52 CMD: UNITARY_STATE SEMI_COLON .

    $default  reduce using rule 52 (CMD)


State 59

   46 CMD: IS SEMI_COLON .

    $default  reduce using rule 46 (CMD)


State 60

   47 CMD: IN SEMI_COLON .

    $default  reduce using rule 47 (CMD)


State 61

   48 CMD: OUT SEMI_COLON .

    $default  reduce using rule 48 (CMD)


State 62

   26 ASSIGNMENT_STATE: varConst MATRIX_INIT . PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 91


State 63

   54 UNITARY_STATE: varConst R_UP .

    $default  reduce using rule 54 (UNITARY_STATE)


State 64

   55 UNITARY_STATE: varConst R_UM .

    $default  reduce using rule 55 (UNITARY_STATE)


State 65

   56 IS: varConst R_IS . TYPE

    INTEGER    shift, and go to state 92
    FLOAT      shift, and go to state 93
    BOOLEAN    shift, and go to state 94
    CHARACTER  shift, and go to state 95
    STRING     shift, and go to state 96

    TYPE  go to state 97


State 66

   27 ASSIGNMENT_STATE: varConst ASSIGNMENT . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 98
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 67

   28 FUNCTION_STATE: varConst START_SCOPE . '(' PARAMS ')' BLOCK END_SCOPE

    '('  shift, and go to state 99


State 68

   82 PRIMITIVE: VAR .

    $default  reduce using rule 82 (PRIMITIVE)


State 69

   83 PRIMITIVE: CONST .

    $default  reduce using rule 83 (PRIMITIVE)


State 70

   66 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE . COLON PRIMITIVE MATRIX_END R_OF TYPE

    COLON  shift, and go to state 100


State 71

   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   74    | NOT EXP .
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 73
    ARITHMETIC_1  shift, and go to state 74
    ARITHMETIC_2  shift, and go to state 75

    $default  reduce using rule 74 (EXP)


State 72

   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP
   80    | '(' EXP . ')'

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80
    ')'             shift, and go to state 101


State 73

   71 EXP: EXP R_DOT . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 102
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 74

   78 EXP: EXP ARITHMETIC_1 . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 103
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 75

   79 EXP: EXP ARITHMETIC_2 . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 104
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 76

   73 EXP: EXP BOOLEAN_LOGIC . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 105
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 77

   76 EXP: EXP EQUALITY_TEST . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 106
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 78

   77 EXP: EXP ORDER_RELATION . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 107
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 79

   72 EXP: EXP COLON . COLON EXPLICIT_TYPE

    COLON  shift, and go to state 108


State 80

   75 EXP: EXP QUESTION . EXP COLON EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 109
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 81

    9 IF: R_IF EXP START_SCOPE . BLOCK END_SCOPE ELSES

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 110


State 82

   67 MATRIX_ACCESS_STATE: varConst MATRIX_INIT . PRIMITIVE COMMA PRIMITIVE MATRIX_END

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 111


State 83

    7 WHILE: R_WHILE EXP START_SCOPE . BLOCK END_SCOPE

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 112


State 84

    8 DO_WHILE: R_DO START_SCOPE BLOCK . END_SCOPE R_WHILE EXP

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 113


State 85

   16 FOR: R_FOR START_SCOPE '(' . ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON FOR_EXP_STATE ')' BLOCK END_SCOPE

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    ASSIGNMENT_STATE  go to state 114
    varConst          go to state 115


State 86

   19 SWITCH: R_SWITCH EXP START_SCOPE . BLOCK_INIT END_LINE CASES BLOCK_END END_SCOPE

    BLOCK_INIT  shift, and go to state 116


State 87

   62 IN: R_IN COLON varConst .

    $default  reduce using rule 62 (IN)


State 88

   63 OUT: R_OUT COLON EXP . COMMA_OUT
   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80
    COMMA           shift, and go to state 117

    $default  reduce using rule 65 (COMMA_OUT)

    COMMA_OUT  go to state 118


State 89

    2 BLOCK: BLOCK_INIT CMDS . BLOCK_END

    BLOCK_END  shift, and go to state 119


State 90

   53 CMD: START_SCOPE BLOCK END_SCOPE .

    $default  reduce using rule 53 (CMD)


State 91

   26 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE . COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP

    COMMA  shift, and go to state 120


State 92

   57 TYPE: INTEGER .

    $default  reduce using rule 57 (TYPE)


State 93

   58 TYPE: FLOAT .

    $default  reduce using rule 58 (TYPE)


State 94

   59 TYPE: BOOLEAN .

    $default  reduce using rule 59 (TYPE)


State 95

   60 TYPE: CHARACTER .

    $default  reduce using rule 60 (TYPE)


State 96

   61 TYPE: STRING .

    $default  reduce using rule 61 (TYPE)


State 97

   56 IS: varConst R_IS TYPE .

    $default  reduce using rule 56 (IS)


State 98

   27 ASSIGNMENT_STATE: varConst ASSIGNMENT EXP .
   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 27 (ASSIGNMENT_STATE)


State 99

   28 FUNCTION_STATE: varConst START_SCOPE '(' . PARAMS ')' BLOCK END_SCOPE

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    $default  reduce using rule 30 (PARAMS)

    PARAMS    go to state 121
    PARAM     go to state 122
    IS        go to state 123
    varConst  go to state 124


State 100

   66 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON . PRIMITIVE MATRIX_END R_OF TYPE

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 125


State 101

   80 EXP: '(' EXP ')' .

    $default  reduce using rule 80 (EXP)


State 102

   71 EXP: EXP . R_DOT EXP
   71    | EXP R_DOT EXP .
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    ARITHMETIC_1  shift, and go to state 74
    ARITHMETIC_2  shift, and go to state 75

    $default  reduce using rule 71 (EXP)


State 103

   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   78    | EXP ARITHMETIC_1 EXP .
   79    | EXP . ARITHMETIC_2 EXP

    ARITHMETIC_2  shift, and go to state 75

    $default  reduce using rule 78 (EXP)


State 104

   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP
   79    | EXP ARITHMETIC_2 EXP .

    $default  reduce using rule 79 (EXP)


State 105

   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   73    | EXP BOOLEAN_LOGIC EXP .
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 73 (EXP)


State 106

   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   76    | EXP EQUALITY_TEST EXP .
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 73
    ARITHMETIC_1  shift, and go to state 74
    ARITHMETIC_2  shift, and go to state 75
    COLON         shift, and go to state 79
    QUESTION      shift, and go to state 80

    $default  reduce using rule 76 (EXP)


State 107

   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   77    | EXP ORDER_RELATION EXP .
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 73
    ARITHMETIC_1  shift, and go to state 74
    ARITHMETIC_2  shift, and go to state 75
    COLON         shift, and go to state 79
    QUESTION      shift, and go to state 80

    $default  reduce using rule 77 (EXP)


State 108

   72 EXP: EXP COLON COLON . EXPLICIT_TYPE

    EXPLICIT_TYPE  shift, and go to state 126


State 109

   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   75    | EXP QUESTION EXP . COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 127
    QUESTION        shift, and go to state 80


State 110

    9 IF: R_IF EXP START_SCOPE BLOCK . END_SCOPE ELSES

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 128


State 111

   67 MATRIX_ACCESS_STATE: varConst MATRIX_INIT PRIMITIVE . COMMA PRIMITIVE MATRIX_END

    COMMA  shift, and go to state 129


State 112

    7 WHILE: R_WHILE EXP START_SCOPE BLOCK . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 130


State 113

    8 DO_WHILE: R_DO START_SCOPE BLOCK END_SCOPE . R_WHILE EXP

    R_WHILE  shift, and go to state 131


State 114

   16 FOR: R_FOR START_SCOPE '(' ASSIGNMENT_STATE . SEMI_COLON EXP SEMI_COLON FOR_EXP_STATE ')' BLOCK END_SCOPE

    SEMI_COLON  shift, and go to state 132


State 115

   26 ASSIGNMENT_STATE: varConst . MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP
   27                 | varConst . ASSIGNMENT EXP

    MATRIX_INIT  shift, and go to state 62
    ASSIGNMENT   shift, and go to state 66


State 116

   19 SWITCH: R_SWITCH EXP START_SCOPE BLOCK_INIT . END_LINE CASES BLOCK_END END_SCOPE

    END_LINE  shift, and go to state 133


State 117

   64 COMMA_OUT: COMMA . EXP COMMA_OUT

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 134
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 118

   63 OUT: R_OUT COLON EXP COMMA_OUT .

    $default  reduce using rule 63 (OUT)


State 119

    2 BLOCK: BLOCK_INIT CMDS BLOCK_END .

    $default  reduce using rule 2 (BLOCK)


State 120

   26 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA . PRIMITIVE MATRIX_END ASSIGNMENT EXP

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 135


State 121

   28 FUNCTION_STATE: varConst START_SCOPE '(' PARAMS . ')' BLOCK END_SCOPE

    ')'  shift, and go to state 136


State 122

   29 PARAMS: PARAM . COMMA_PARAMS

    COMMA  shift, and go to state 137

    $default  reduce using rule 32 (COMMA_PARAMS)

    COMMA_PARAMS  go to state 138


State 123

   33 PARAM: IS .

    $default  reduce using rule 33 (PARAM)


State 124

   56 IS: varConst . R_IS TYPE

    R_IS  shift, and go to state 65


State 125

   66 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON PRIMITIVE . MATRIX_END R_OF TYPE

    MATRIX_END  shift, and go to state 139


State 126

   72 EXP: EXP COLON COLON EXPLICIT_TYPE .

    $default  reduce using rule 72 (EXP)


State 127

   72 EXP: EXP COLON . COLON EXPLICIT_TYPE
   75    | EXP QUESTION EXP COLON . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    COLON        shift, and go to state 108
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 140
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 128

    9 IF: R_IF EXP START_SCOPE BLOCK END_SCOPE . ELSES

    R_ELSE    shift, and go to state 141
    END_LINE  shift, and go to state 142

    R_ELSE    [reduce using rule 11 (ELSES)]
    END_LINE  [reduce using rule 11 (ELSES)]
    $default  reduce using rule 11 (ELSES)

    ELSES  go to state 143
    ELSE   go to state 144


State 129

   67 MATRIX_ACCESS_STATE: varConst MATRIX_INIT PRIMITIVE COMMA . PRIMITIVE MATRIX_END

    INTEGER    shift, and go to state 32
    FLOAT      shift, and go to state 33
    BOOLEAN    shift, and go to state 34
    CHARACTER  shift, and go to state 35
    STRING     shift, and go to state 36
    VAR        shift, and go to state 68
    CONST      shift, and go to state 69

    PRIMITIVE  go to state 145


State 130

    7 WHILE: R_WHILE EXP START_SCOPE BLOCK END_SCOPE .

    $default  reduce using rule 7 (WHILE)


State 131

    8 DO_WHILE: R_DO START_SCOPE BLOCK END_SCOPE R_WHILE . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 146
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 132

   16 FOR: R_FOR START_SCOPE '(' ASSIGNMENT_STATE SEMI_COLON . EXP SEMI_COLON FOR_EXP_STATE ')' BLOCK END_SCOPE

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 147
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 133

   19 SWITCH: R_SWITCH EXP START_SCOPE BLOCK_INIT END_LINE . CASES BLOCK_END END_SCOPE

    R_CASE  shift, and go to state 148

    CASES  go to state 149
    CASE   go to state 150


State 134

   64 COMMA_OUT: COMMA EXP . COMMA_OUT
   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80
    COMMA           shift, and go to state 117

    $default  reduce using rule 65 (COMMA_OUT)

    COMMA_OUT  go to state 151


State 135

   26 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE . MATRIX_END ASSIGNMENT EXP

    MATRIX_END  shift, and go to state 152


State 136

   28 FUNCTION_STATE: varConst START_SCOPE '(' PARAMS ')' . BLOCK END_SCOPE

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 153


State 137

   31 COMMA_PARAMS: COMMA . PARAM COMMA_PARAMS

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    PARAM     go to state 154
    IS        go to state 123
    varConst  go to state 124


State 138

   29 PARAMS: PARAM COMMA_PARAMS .

    $default  reduce using rule 29 (PARAMS)


State 139

   66 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON PRIMITIVE MATRIX_END . R_OF TYPE

    R_OF  shift, and go to state 155


State 140

   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   75    | EXP QUESTION EXP COLON EXP .
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT         shift, and go to state 73
    ARITHMETIC_1  shift, and go to state 74
    ARITHMETIC_2  shift, and go to state 75

    $default  reduce using rule 75 (EXP)


State 141

   12 ELSE: R_ELSE . ELSEIF

    R_IF  shift, and go to state 1

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 156
    IF           go to state 157
    ELSEIF       go to state 158


State 142

   13 ELSE: END_LINE .

    $default  reduce using rule 13 (ELSE)


State 143

    9 IF: R_IF EXP START_SCOPE BLOCK END_SCOPE ELSES .

    $default  reduce using rule 9 (IF)


State 144

   10 ELSES: ELSE . ELSES

    R_ELSE    shift, and go to state 141
    END_LINE  shift, and go to state 142

    R_ELSE    [reduce using rule 11 (ELSES)]
    END_LINE  [reduce using rule 11 (ELSES)]
    $default  reduce using rule 11 (ELSES)

    ELSES  go to state 159
    ELSE   go to state 144


State 145

   67 MATRIX_ACCESS_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE . MATRIX_END

    MATRIX_END  shift, and go to state 160


State 146

    8 DO_WHILE: R_DO START_SCOPE BLOCK END_SCOPE R_WHILE EXP .
   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 8 (DO_WHILE)


State 147

   16 FOR: R_FOR START_SCOPE '(' ASSIGNMENT_STATE SEMI_COLON EXP . SEMI_COLON FOR_EXP_STATE ')' BLOCK END_SCOPE
   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    SEMI_COLON      shift, and go to state 161
    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80


State 148

   22 CASE: R_CASE . EXP COLON START_SCOPE CMDS END_SCOPE

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 162
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 149

   19 SWITCH: R_SWITCH EXP START_SCOPE BLOCK_INIT END_LINE CASES . BLOCK_END END_SCOPE

    BLOCK_END  shift, and go to state 163


State 150

   20 CASES: CASE . DEFAULT
   21      | CASE . CASES

    R_CASE     shift, and go to state 148
    R_DEFAULT  shift, and go to state 164

    CASES    go to state 165
    CASE     go to state 150
    DEFAULT  go to state 166


State 151

   64 COMMA_OUT: COMMA EXP COMMA_OUT .

    $default  reduce using rule 64 (COMMA_OUT)


State 152

   26 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END . ASSIGNMENT EXP

    ASSIGNMENT  shift, and go to state 167


State 153

   28 FUNCTION_STATE: varConst START_SCOPE '(' PARAMS ')' BLOCK . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 168


State 154

   31 COMMA_PARAMS: COMMA PARAM . COMMA_PARAMS

    COMMA  shift, and go to state 137

    $default  reduce using rule 32 (COMMA_PARAMS)

    COMMA_PARAMS  go to state 169


State 155

   66 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON PRIMITIVE MATRIX_END R_OF . TYPE

    INTEGER    shift, and go to state 92
    FLOAT      shift, and go to state 93
    BOOLEAN    shift, and go to state 94
    CHARACTER  shift, and go to state 95
    STRING     shift, and go to state 96

    TYPE  go to state 170


State 156

   15 ELSEIF: START_SCOPE . BLOCK END_SCOPE

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 171


State 157

   14 ELSEIF: IF .

    $default  reduce using rule 14 (ELSEIF)


State 158

   12 ELSE: R_ELSE ELSEIF .

    $default  reduce using rule 12 (ELSE)


State 159

   10 ELSES: ELSE ELSES .

    $default  reduce using rule 10 (ELSES)


State 160

   67 MATRIX_ACCESS_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END .

    $default  reduce using rule 67 (MATRIX_ACCESS_STATE)


State 161

   16 FOR: R_FOR START_SCOPE '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON . FOR_EXP_STATE ')' BLOCK END_SCOPE

    VAR    shift, and go to state 10
    CONST  shift, and go to state 11

    FOR_EXP_STATE     go to state 172
    ASSIGNMENT_STATE  go to state 173
    UNITARY_STATE     go to state 174
    varConst          go to state 175


State 162

   22 CASE: R_CASE EXP . COLON START_SCOPE CMDS END_SCOPE
   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 176
    QUESTION        shift, and go to state 80


State 163

   19 SWITCH: R_SWITCH EXP START_SCOPE BLOCK_INIT END_LINE CASES BLOCK_END . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 177


State 164

   23 DEFAULT: R_DEFAULT . COLON START_SCOPE CMDS END_SCOPE

    COLON  shift, and go to state 178


State 165

   21 CASES: CASE CASES .

    $default  reduce using rule 21 (CASES)


State 166

   20 CASES: CASE DEFAULT .

    $default  reduce using rule 20 (CASES)


State 167

   26 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT . EXP

    MATRIX_INIT  shift, and go to state 31
    INTEGER      shift, and go to state 32
    FLOAT        shift, and go to state 33
    BOOLEAN      shift, and go to state 34
    CHARACTER    shift, and go to state 35
    STRING       shift, and go to state 36
    NOT          shift, and go to state 37
    VAR          shift, and go to state 38
    CONST        shift, and go to state 39
    '('          shift, and go to state 40

    UNITARY_STATE        go to state 41
    MATRIX_INIT_STATE    go to state 42
    MATRIX_ACCESS_STATE  go to state 43
    EXP                  go to state 179
    PRIMITIVE            go to state 45
    varConst             go to state 46


State 168

   28 FUNCTION_STATE: varConst START_SCOPE '(' PARAMS ')' BLOCK END_SCOPE .

    $default  reduce using rule 28 (FUNCTION_STATE)


State 169

   31 COMMA_PARAMS: COMMA PARAM COMMA_PARAMS .

    $default  reduce using rule 31 (COMMA_PARAMS)


State 170

   66 MATRIX_INIT_STATE: MATRIX_INIT PRIMITIVE COLON PRIMITIVE MATRIX_END R_OF TYPE .

    $default  reduce using rule 66 (MATRIX_INIT_STATE)


State 171

   15 ELSEIF: START_SCOPE BLOCK . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 180


State 172

   16 FOR: R_FOR START_SCOPE '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON FOR_EXP_STATE . ')' BLOCK END_SCOPE

    ')'  shift, and go to state 181


State 173

   18 FOR_EXP_STATE: ASSIGNMENT_STATE .

    $default  reduce using rule 18 (FOR_EXP_STATE)


State 174

   17 FOR_EXP_STATE: UNITARY_STATE .

    $default  reduce using rule 17 (FOR_EXP_STATE)


State 175

   26 ASSIGNMENT_STATE: varConst . MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP
   27                 | varConst . ASSIGNMENT EXP
   54 UNITARY_STATE: varConst . R_UP
   55              | varConst . R_UM

    MATRIX_INIT  shift, and go to state 62
    R_UP         shift, and go to state 63
    R_UM         shift, and go to state 64
    ASSIGNMENT   shift, and go to state 66


State 176

   22 CASE: R_CASE EXP COLON . START_SCOPE CMDS END_SCOPE
   72 EXP: EXP COLON . COLON EXPLICIT_TYPE

    COLON  shift, and go to state 108

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 182


State 177

   19 SWITCH: R_SWITCH EXP START_SCOPE BLOCK_INIT END_LINE CASES BLOCK_END END_SCOPE .

    $default  reduce using rule 19 (SWITCH)


State 178

   23 DEFAULT: R_DEFAULT COLON . START_SCOPE CMDS END_SCOPE

    $default  reduce using rule 3 (START_SCOPE)

    START_SCOPE  go to state 183


State 179

   26 ASSIGNMENT_STATE: varConst MATRIX_INIT PRIMITIVE COMMA PRIMITIVE MATRIX_END ASSIGNMENT EXP .
   71 EXP: EXP . R_DOT EXP
   72    | EXP . COLON COLON EXPLICIT_TYPE
   73    | EXP . BOOLEAN_LOGIC EXP
   75    | EXP . QUESTION EXP COLON EXP
   76    | EXP . EQUALITY_TEST EXP
   77    | EXP . ORDER_RELATION EXP
   78    | EXP . ARITHMETIC_1 EXP
   79    | EXP . ARITHMETIC_2 EXP

    R_DOT           shift, and go to state 73
    ARITHMETIC_1    shift, and go to state 74
    ARITHMETIC_2    shift, and go to state 75
    BOOLEAN_LOGIC   shift, and go to state 76
    EQUALITY_TEST   shift, and go to state 77
    ORDER_RELATION  shift, and go to state 78
    COLON           shift, and go to state 79
    QUESTION        shift, and go to state 80

    $default  reduce using rule 26 (ASSIGNMENT_STATE)


State 180

   15 ELSEIF: START_SCOPE BLOCK END_SCOPE .

    $default  reduce using rule 15 (ELSEIF)


State 181

   16 FOR: R_FOR START_SCOPE '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON FOR_EXP_STATE ')' . BLOCK END_SCOPE

    BLOCK_INIT  shift, and go to state 54

    BLOCK  go to state 184


State 182

   22 CASE: R_CASE EXP COLON START_SCOPE . CMDS END_SCOPE

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    BLOCK_INIT  reduce using rule 3 (START_SCOPE)
    $default    reduce using rule 6 (CMDS)

    START_SCOPE       go to state 14
    CMDS              go to state 185
    WHILE             go to state 16
    DO_WHILE          go to state 17
    IF                go to state 18
    FOR               go to state 19
    SWITCH            go to state 20
    BREAK             go to state 21
    CONTINUE          go to state 22
    ASSIGNMENT_STATE  go to state 23
    FUNCTION_STATE    go to state 24
    CMD               go to state 25
    UNITARY_STATE     go to state 26
    IS                go to state 27
    IN                go to state 28
    OUT               go to state 29
    varConst          go to state 30


State 183

   23 DEFAULT: R_DEFAULT COLON START_SCOPE . CMDS END_SCOPE

    R_IF        shift, and go to state 1
    R_WHILE     shift, and go to state 2
    R_DO        shift, and go to state 3
    R_FOR       shift, and go to state 4
    R_SWITCH    shift, and go to state 5
    R_BREAK     shift, and go to state 6
    R_CONTINUE  shift, and go to state 7
    R_IN        shift, and go to state 8
    R_OUT       shift, and go to state 9
    VAR         shift, and go to state 10
    CONST       shift, and go to state 11
    END_LINE    shift, and go to state 12

    BLOCK_END  reduce using rule 6 (CMDS)
    $default   reduce using rule 3 (START_SCOPE)

    START_SCOPE       go to state 14
    CMDS              go to state 186
    WHILE             go to state 16
    DO_WHILE          go to state 17
    IF                go to state 18
    FOR               go to state 19
    SWITCH            go to state 20
    BREAK             go to state 21
    CONTINUE          go to state 22
    ASSIGNMENT_STATE  go to state 23
    FUNCTION_STATE    go to state 24
    CMD               go to state 25
    UNITARY_STATE     go to state 26
    IS                go to state 27
    IN                go to state 28
    OUT               go to state 29
    varConst          go to state 30


State 184

   16 FOR: R_FOR START_SCOPE '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON FOR_EXP_STATE ')' BLOCK . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 187


State 185

   22 CASE: R_CASE EXP COLON START_SCOPE CMDS . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 188


State 186

   23 DEFAULT: R_DEFAULT COLON START_SCOPE CMDS . END_SCOPE

    $default  reduce using rule 4 (END_SCOPE)

    END_SCOPE  go to state 189


State 187

   16 FOR: R_FOR START_SCOPE '(' ASSIGNMENT_STATE SEMI_COLON EXP SEMI_COLON FOR_EXP_STATE ')' BLOCK END_SCOPE .

    $default  reduce using rule 16 (FOR)


State 188

   22 CASE: R_CASE EXP COLON START_SCOPE CMDS END_SCOPE .

    $default  reduce using rule 22 (CASE)


State 189

   23 DEFAULT: R_DEFAULT COLON START_SCOPE CMDS END_SCOPE .

    $default  reduce using rule 23 (DEFAULT)
